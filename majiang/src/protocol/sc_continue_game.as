package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_continue_game extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int banker_seat;
	private static final int fieldNumberBanker_seat = 1;
	private final boolean hasBanker_seat;

	private final int seat_index;
	private static final int fieldNumberSeat_index = 2;
	private final boolean hasSeat_index;

	private final int lack_second;
	private static final int fieldNumberLack_second = 3;
	private final boolean hasLack_second;

	private final int curr_turn;
	private static final int fieldNumberCurr_turn = 4;
	private final boolean hasCurr_turn;

	private final int turn_second;
	private static final int fieldNumberTurn_second = 5;
	private final boolean hasTurn_second;

	private final boolean thinking;
	private static final int fieldNumberThinking = 6;
	private final boolean hasThinking;

	private final int think_second;
	private static final int fieldNumberThink_second = 7;
	private final boolean hasThink_second;

	private final java.util.Vector show_actions;
	private static final int fieldNumberShow_actions = 8;

	private final java.util.Vector seat_infoes;
	private static final int fieldNumberSeat_infoes = 9;

	private final int tiles_remain;
	private static final int fieldNumberTiles_remain = 10;
	private final boolean hasTiles_remain;

	private final int roomid;
	private static final int fieldNumberRoomid = 11;
	private final boolean hasRoomid;

	private final int service_gold;
	private static final int fieldNumberService_gold = 12;
	private final boolean hasService_gold;

	private final int ma_seat;
	private static final int fieldNumberMa_seat = 13;
	private final boolean hasMa_seat;

	private final String room_level;
	private static final int fieldNumberRoom_level = 14;
	private final boolean hasRoom_level;

	private final int room_base;
	private static final int fieldNumberRoom_base = 15;
	private final boolean hasRoom_base;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_continue_game(final Builder builder) {
			this.banker_seat = builder.banker_seat;
			this.hasBanker_seat = builder.hasBanker_seat;
			this.seat_index = builder.seat_index;
			this.hasSeat_index = builder.hasSeat_index;
			this.lack_second = builder.lack_second;
			this.hasLack_second = builder.hasLack_second;
			this.curr_turn = builder.curr_turn;
			this.hasCurr_turn = builder.hasCurr_turn;
			this.turn_second = builder.turn_second;
			this.hasTurn_second = builder.hasTurn_second;
			this.thinking = builder.thinking;
			this.hasThinking = builder.hasThinking;
			this.think_second = builder.think_second;
			this.hasThink_second = builder.hasThink_second;
			this.show_actions = builder.show_actions;
			this.seat_infoes = builder.seat_infoes;
			this.tiles_remain = builder.tiles_remain;
			this.hasTiles_remain = builder.hasTiles_remain;
			this.roomid = builder.roomid;
			this.hasRoomid = builder.hasRoomid;
			this.service_gold = builder.service_gold;
			this.hasService_gold = builder.hasService_gold;
			this.ma_seat = builder.ma_seat;
			this.hasMa_seat = builder.hasMa_seat;
			this.room_level = builder.room_level;
			this.hasRoom_level = builder.hasRoom_level;
			this.room_base = builder.room_base;
			this.hasRoom_base = builder.hasRoom_base;
			}

	public static class Builder {
		private int banker_seat;
		private boolean hasBanker_seat = false;

		private int seat_index;
		private boolean hasSeat_index = false;

		private int lack_second;
		private boolean hasLack_second = false;

		private int curr_turn;
		private boolean hasCurr_turn = false;

		private int turn_second;
		private boolean hasTurn_second = false;

		private boolean thinking;
		private boolean hasThinking = false;

		private int think_second;
		private boolean hasThink_second = false;

		private java.util.Vector show_actions = new java.util.Vector();
		private boolean hasShow_actions = false;

		private java.util.Vector seat_infoes = new java.util.Vector();
		private boolean hasSeat_infoes = false;

		private int tiles_remain;
		private boolean hasTiles_remain = false;

		private int roomid;
		private boolean hasRoomid = false;

		private int service_gold;
		private boolean hasService_gold = false;

		private int ma_seat;
		private boolean hasMa_seat = false;

		private String room_level;
		private boolean hasRoom_level = false;

		private int room_base;
		private boolean hasRoom_base = false;


		private Builder() {
		}

		public Builder setBanker_seat(final int banker_seat) {
			this.banker_seat = banker_seat;
			this.hasBanker_seat = true;
			return this;
		}

		public Builder setSeat_index(final int seat_index) {
			this.seat_index = seat_index;
			this.hasSeat_index = true;
			return this;
		}

		public Builder setLack_second(final int lack_second) {
			this.lack_second = lack_second;
			this.hasLack_second = true;
			return this;
		}

		public Builder setCurr_turn(final int curr_turn) {
			this.curr_turn = curr_turn;
			this.hasCurr_turn = true;
			return this;
		}

		public Builder setTurn_second(final int turn_second) {
			this.turn_second = turn_second;
			this.hasTurn_second = true;
			return this;
		}

		public Builder setThinking(final boolean thinking) {
			this.thinking = thinking;
			this.hasThinking = true;
			return this;
		}

		public Builder setThink_second(final int think_second) {
			this.think_second = think_second;
			this.hasThink_second = true;
			return this;
		}

		public Builder setShow_actions(final java.util.Vector show_actions) {
			if(!hasShow_actions) {
				hasShow_actions = true;
			}
			this.show_actions = show_actions;
			return this;
		}


		public Builder addElementShow_actions(final scgame_show_actions element) {
			if(!hasShow_actions) {
				hasShow_actions = true;
			}
			show_actions.addElement(element);
			return this;
		}

		public Builder setSeat_infoes(final java.util.Vector seat_infoes) {
			if(!hasSeat_infoes) {
				hasSeat_infoes = true;
			}
			this.seat_infoes = seat_infoes;
			return this;
		}


		public Builder addElementSeat_infoes(final sccontinue_seat_info element) {
			if(!hasSeat_infoes) {
				hasSeat_infoes = true;
			}
			seat_infoes.addElement(element);
			return this;
		}

		public Builder setTiles_remain(final int tiles_remain) {
			this.tiles_remain = tiles_remain;
			this.hasTiles_remain = true;
			return this;
		}

		public Builder setRoomid(final int roomid) {
			this.roomid = roomid;
			this.hasRoomid = true;
			return this;
		}

		public Builder setService_gold(final int service_gold) {
			this.service_gold = service_gold;
			this.hasService_gold = true;
			return this;
		}

		public Builder setMa_seat(final int ma_seat) {
			this.ma_seat = ma_seat;
			this.hasMa_seat = true;
			return this;
		}

		public Builder setRoom_level(final String room_level) {
			this.room_level = room_level;
			this.hasRoom_level = true;
			return this;
		}

		public Builder setRoom_base(final int room_base) {
			this.room_base = room_base;
			this.hasRoom_base = true;
			return this;
		}

		public sc_continue_game build() {
			return new sc_continue_game(this);
		}
	}

	public int getBanker_seat() {
		return banker_seat;
	}

	public boolean hasBanker_seat() {
		return hasBanker_seat;
	}

	public int getSeat_index() {
		return seat_index;
	}

	public boolean hasSeat_index() {
		return hasSeat_index;
	}

	public int getLack_second() {
		return lack_second;
	}

	public boolean hasLack_second() {
		return hasLack_second;
	}

	public int getCurr_turn() {
		return curr_turn;
	}

	public boolean hasCurr_turn() {
		return hasCurr_turn;
	}

	public int getTurn_second() {
		return turn_second;
	}

	public boolean hasTurn_second() {
		return hasTurn_second;
	}

	public boolean getThinking() {
		return thinking;
	}

	public boolean hasThinking() {
		return hasThinking;
	}

	public int getThink_second() {
		return think_second;
	}

	public boolean hasThink_second() {
		return hasThink_second;
	}

	public java.util.Vector getShow_actions() {
		return show_actions;
	}

	public java.util.Vector getSeat_infoes() {
		return seat_infoes;
	}

	public int getTiles_remain() {
		return tiles_remain;
	}

	public boolean hasTiles_remain() {
		return hasTiles_remain;
	}

	public int getRoomid() {
		return roomid;
	}

	public boolean hasRoomid() {
		return hasRoomid;
	}

	public int getService_gold() {
		return service_gold;
	}

	public boolean hasService_gold() {
		return hasService_gold;
	}

	public int getMa_seat() {
		return ma_seat;
	}

	public boolean hasMa_seat() {
		return hasMa_seat;
	}

	public String getRoom_level() {
		return room_level;
	}

	public boolean hasRoom_level() {
		return hasRoom_level;
	}

	public int getRoom_base() {
		return room_base;
	}

	public boolean hasRoom_base() {
		return hasRoom_base;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasBanker_seat) retValue += "banker_seat = " + this.banker_seat + TAB;
		if(hasSeat_index) retValue += "seat_index = " + this.seat_index + TAB;
		if(hasLack_second) retValue += "lack_second = " + this.lack_second + TAB;
		if(hasCurr_turn) retValue += "curr_turn = " + this.curr_turn + TAB;
		if(hasTurn_second) retValue += "turn_second = " + this.turn_second + TAB;
		if(hasThinking) retValue += "thinking = " + this.thinking + TAB;
		if(hasThink_second) retValue += "think_second = " + this.think_second + TAB;
		retValue += "show_actions = " + this.show_actions + TAB;
		retValue += "seat_infoes = " + this.seat_infoes + TAB;
		if(hasTiles_remain) retValue += "tiles_remain = " + this.tiles_remain + TAB;
		if(hasRoomid) retValue += "roomid = " + this.roomid + TAB;
		if(hasService_gold) retValue += "service_gold = " + this.service_gold + TAB;
		if(hasMa_seat) retValue += "ma_seat = " + this.ma_seat + TAB;
		if(hasRoom_level) retValue += "room_level = " + this.room_level + TAB;
		if(hasRoom_base) retValue += "room_base = " + this.room_base + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasBanker_seat) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberBanker_seat, banker_seat);
		if(hasSeat_index) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSeat_index, seat_index);
		if(hasLack_second) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberLack_second, lack_second);
		if(hasCurr_turn) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberCurr_turn, curr_turn);
		if(hasTurn_second) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTurn_second, turn_second);
		if(hasThinking) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberThinking, thinking);
		if(hasThink_second) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberThink_second, think_second);
		if(hasTiles_remain) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTiles_remain, tiles_remain);
		if(hasRoomid) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberRoomid, roomid);
		if(hasService_gold) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberService_gold, service_gold);
		if(hasMa_seat) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberMa_seat, ma_seat);
		if(hasRoom_level) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberRoom_level, room_level);
		if(hasRoom_base) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberRoom_base, room_base);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberShow_actions, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, show_actions);
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberSeat_infoes, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, seat_infoes);

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasBanker_seat) writer.writeInt(fieldNumberBanker_seat, banker_seat);
		if(hasSeat_index) writer.writeInt(fieldNumberSeat_index, seat_index);
		if(hasLack_second) writer.writeInt(fieldNumberLack_second, lack_second);
		if(hasCurr_turn) writer.writeInt(fieldNumberCurr_turn, curr_turn);
		if(hasTurn_second) writer.writeInt(fieldNumberTurn_second, turn_second);
		if(hasThinking) writer.writeBoolean(fieldNumberThinking, thinking);
		if(hasThink_second) writer.writeInt(fieldNumberThink_second, think_second);
		writer.writeList(fieldNumberShow_actions, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, show_actions);
		writer.writeList(fieldNumberSeat_infoes, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, seat_infoes);
		if(hasTiles_remain) writer.writeInt(fieldNumberTiles_remain, tiles_remain);
		if(hasRoomid) writer.writeInt(fieldNumberRoomid, roomid);
		if(hasService_gold) writer.writeInt(fieldNumberService_gold, service_gold);
		if(hasMa_seat) writer.writeInt(fieldNumberMa_seat, ma_seat);
		if(hasRoom_level) writer.writeString(fieldNumberRoom_level, room_level);
		if(hasRoom_base) writer.writeInt(fieldNumberRoom_base, room_base);
	}

	static sc_continue_game parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_continue_game.Builder builder = sc_continue_game.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberBanker_seat:
				builder.setBanker_seat(reader.readInt(fieldNumber));
				break;
			case fieldNumberSeat_index:
				builder.setSeat_index(reader.readInt(fieldNumber));
				break;
			case fieldNumberLack_second:
				builder.setLack_second(reader.readInt(fieldNumber));
				break;
			case fieldNumberCurr_turn:
				builder.setCurr_turn(reader.readInt(fieldNumber));
				break;
			case fieldNumberTurn_second:
				builder.setTurn_second(reader.readInt(fieldNumber));
				break;
			case fieldNumberThinking:
				builder.setThinking(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberThink_second:
				builder.setThink_second(reader.readInt(fieldNumber));
				break;
			case fieldNumberShow_actions:
			 java.util.Vector vcShow_actions = reader.readMessages(fieldNumberShow_actions);
				for(int i = 0 ; i < vcShow_actions.size(); i++) {
					byte[] eachBinData = (byte[]) vcShow_actions.elementAt(i);
					scgame_show_actions.Builder builderShow_actions = scgame_show_actions.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolShow_actions = true;
					int nestedFieldShow_actions = -1;
					while(boolShow_actions) {
						nestedFieldShow_actions = getNextFieldNumber(innerInputReader);
						boolShow_actions = scgame_show_actions.populateBuilderWithField(innerInputReader, builderShow_actions, nestedFieldShow_actions);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementShow_actions(builderShow_actions.build());
				}
				break;
			case fieldNumberSeat_infoes:
			 java.util.Vector vcSeat_infoes = reader.readMessages(fieldNumberSeat_infoes);
				for(int i = 0 ; i < vcSeat_infoes.size(); i++) {
					byte[] eachBinData = (byte[]) vcSeat_infoes.elementAt(i);
					sccontinue_seat_info.Builder builderSeat_infoes = sccontinue_seat_info.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolSeat_infoes = true;
					int nestedFieldSeat_infoes = -1;
					while(boolSeat_infoes) {
						nestedFieldSeat_infoes = getNextFieldNumber(innerInputReader);
						boolSeat_infoes = sccontinue_seat_info.populateBuilderWithField(innerInputReader, builderSeat_infoes, nestedFieldSeat_infoes);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementSeat_infoes(builderSeat_infoes.build());
				}
				break;
			case fieldNumberTiles_remain:
				builder.setTiles_remain(reader.readInt(fieldNumber));
				break;
			case fieldNumberRoomid:
				builder.setRoomid(reader.readInt(fieldNumber));
				break;
			case fieldNumberService_gold:
				builder.setService_gold(reader.readInt(fieldNumber));
				break;
			case fieldNumberMa_seat:
				builder.setMa_seat(reader.readInt(fieldNumber));
				break;
			case fieldNumberRoom_level:
				builder.setRoom_level(reader.readString(fieldNumber));
				break;
			case fieldNumberRoom_base:
				builder.setRoom_base(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_continue_game.unknownTagHandler = unknownTagHandler;
	}

	public static sc_continue_game parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_continue_game parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_continue_game parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}