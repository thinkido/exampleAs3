package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class stplayer_info extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final String pid;
	private static final int fieldNumberPid = 2;
	private final boolean hasPid;

	private final String name;
	private static final int fieldNumberName = 3;
	private final boolean hasName;

	private final long gold;
	private static final int fieldNumberGold = 4;
	private final boolean hasGold;

	private final long exp;
	private static final int fieldNumberExp = 5;
	private final boolean hasExp;

	private final int level;
	private static final int fieldNumberLevel = 6;
	private final boolean hasLevel;

	private final int sex;
	private static final int fieldNumberSex = 7;
	private final boolean hasSex;

	private final int vip;
	private static final int fieldNumberVip = 8;
	private final boolean hasVip;

	private final int portrait;
	private static final int fieldNumberPortrait = 9;
	private final boolean hasPortrait;

	private final String id;
	private static final int fieldNumberId = 10;
	private final boolean hasId;

	private final String idtype;
	private static final int fieldNumberIdtype = 11;
	private final boolean hasIdtype;


	public static Builder newBuilder() {
		return new Builder();
	}

	private stplayer_info(final Builder builder) {
			this.pid = builder.pid;
			this.hasPid = builder.hasPid;
			this.name = builder.name;
			this.hasName = builder.hasName;
			this.gold = builder.gold;
			this.hasGold = builder.hasGold;
			this.exp = builder.exp;
			this.hasExp = builder.hasExp;
			this.level = builder.level;
			this.hasLevel = builder.hasLevel;
			this.sex = builder.sex;
			this.hasSex = builder.hasSex;
			this.vip = builder.vip;
			this.hasVip = builder.hasVip;
			this.portrait = builder.portrait;
			this.hasPortrait = builder.hasPortrait;
			this.id = builder.id;
			this.hasId = builder.hasId;
			this.idtype = builder.idtype;
			this.hasIdtype = builder.hasIdtype;
			}

	public static class Builder {
		private String pid;
		private boolean hasPid = false;

		private String name;
		private boolean hasName = false;

		private long gold;
		private boolean hasGold = false;

		private long exp;
		private boolean hasExp = false;

		private int level;
		private boolean hasLevel = false;

		private int sex;
		private boolean hasSex = false;

		private int vip;
		private boolean hasVip = false;

		private int portrait;
		private boolean hasPortrait = false;

		private String id;
		private boolean hasId = false;

		private String idtype;
		private boolean hasIdtype = false;


		private Builder() {
		}

		public Builder setPid(final String pid) {
			this.pid = pid;
			this.hasPid = true;
			return this;
		}

		public Builder setName(final String name) {
			this.name = name;
			this.hasName = true;
			return this;
		}

		public Builder setGold(final long gold) {
			this.gold = gold;
			this.hasGold = true;
			return this;
		}

		public Builder setExp(final long exp) {
			this.exp = exp;
			this.hasExp = true;
			return this;
		}

		public Builder setLevel(final int level) {
			this.level = level;
			this.hasLevel = true;
			return this;
		}

		public Builder setSex(final int sex) {
			this.sex = sex;
			this.hasSex = true;
			return this;
		}

		public Builder setVip(final int vip) {
			this.vip = vip;
			this.hasVip = true;
			return this;
		}

		public Builder setPortrait(final int portrait) {
			this.portrait = portrait;
			this.hasPortrait = true;
			return this;
		}

		public Builder setId(final String id) {
			this.id = id;
			this.hasId = true;
			return this;
		}

		public Builder setIdtype(final String idtype) {
			this.idtype = idtype;
			this.hasIdtype = true;
			return this;
		}

		public stplayer_info build() {
			return new stplayer_info(this);
		}
	}

	public String getPid() {
		return pid;
	}

	public boolean hasPid() {
		return hasPid;
	}

	public String getName() {
		return name;
	}

	public boolean hasName() {
		return hasName;
	}

	public long getGold() {
		return gold;
	}

	public boolean hasGold() {
		return hasGold;
	}

	public long getExp() {
		return exp;
	}

	public boolean hasExp() {
		return hasExp;
	}

	public int getLevel() {
		return level;
	}

	public boolean hasLevel() {
		return hasLevel;
	}

	public int getSex() {
		return sex;
	}

	public boolean hasSex() {
		return hasSex;
	}

	public int getVip() {
		return vip;
	}

	public boolean hasVip() {
		return hasVip;
	}

	public int getPortrait() {
		return portrait;
	}

	public boolean hasPortrait() {
		return hasPortrait;
	}

	public String getId() {
		return id;
	}

	public boolean hasId() {
		return hasId;
	}

	public String getIdtype() {
		return idtype;
	}

	public boolean hasIdtype() {
		return hasIdtype;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasPid) retValue += "pid = " + this.pid + TAB;
		if(hasName) retValue += "name = " + this.name + TAB;
		if(hasGold) retValue += "gold = " + this.gold + TAB;
		if(hasExp) retValue += "exp = " + this.exp + TAB;
		if(hasLevel) retValue += "level = " + this.level + TAB;
		if(hasSex) retValue += "sex = " + this.sex + TAB;
		if(hasVip) retValue += "vip = " + this.vip + TAB;
		if(hasPortrait) retValue += "portrait = " + this.portrait + TAB;
		if(hasId) retValue += "id = " + this.id + TAB;
		if(hasIdtype) retValue += "idtype = " + this.idtype + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasPid) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberPid, pid);
		if(hasName) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberName, name);
		if(hasGold) totalSize += ComputeSizeUtil.computeLongSize(fieldNumberGold, gold);
		if(hasExp) totalSize += ComputeSizeUtil.computeLongSize(fieldNumberExp, exp);
		if(hasLevel) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberLevel, level);
		if(hasSex) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSex, sex);
		if(hasVip) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberVip, vip);
		if(hasPortrait) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberPortrait, portrait);
		if(hasId) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberId, id);
		if(hasIdtype) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberIdtype, idtype);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasPid) writer.writeString(fieldNumberPid, pid);
		if(hasName) writer.writeString(fieldNumberName, name);
		if(hasGold) writer.writeLong(fieldNumberGold, gold);
		if(hasExp) writer.writeLong(fieldNumberExp, exp);
		if(hasLevel) writer.writeInt(fieldNumberLevel, level);
		if(hasSex) writer.writeInt(fieldNumberSex, sex);
		if(hasVip) writer.writeInt(fieldNumberVip, vip);
		if(hasPortrait) writer.writeInt(fieldNumberPortrait, portrait);
		if(hasId) writer.writeString(fieldNumberId, id);
		if(hasIdtype) writer.writeString(fieldNumberIdtype, idtype);
	}

	static stplayer_info parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final stplayer_info.Builder builder = stplayer_info.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberPid:
				builder.setPid(reader.readString(fieldNumber));
				break;
			case fieldNumberName:
				builder.setName(reader.readString(fieldNumber));
				break;
			case fieldNumberGold:
				builder.setGold(reader.readLong(fieldNumber));
				break;
			case fieldNumberExp:
				builder.setExp(reader.readLong(fieldNumber));
				break;
			case fieldNumberLevel:
				builder.setLevel(reader.readInt(fieldNumber));
				break;
			case fieldNumberSex:
				builder.setSex(reader.readInt(fieldNumber));
				break;
			case fieldNumberVip:
				builder.setVip(reader.readInt(fieldNumber));
				break;
			case fieldNumberPortrait:
				builder.setPortrait(reader.readInt(fieldNumber));
				break;
			case fieldNumberId:
				builder.setId(reader.readString(fieldNumber));
				break;
			case fieldNumberIdtype:
				builder.setIdtype(reader.readString(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		stplayer_info.unknownTagHandler = unknownTagHandler;
	}

	public static stplayer_info parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static stplayer_info parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static stplayer_info parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}