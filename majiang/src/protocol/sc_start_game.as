package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_start_game extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final java.util.Vector other_infoes;
	private static final int fieldNumberOther_infoes = 1;

	private final hand_seq_info you_seq_info;
	private static final int fieldNumberYou_seq_info = 2;
	private final boolean hasYou_seq_info;

	private final int starter_seat_index;
	private static final int fieldNumberStarter_seat_index = 3;
	private final boolean hasStarter_seat_index;

	private final int tiles_remain;
	private static final int fieldNumberTiles_remain = 4;
	private final boolean hasTiles_remain;

	private final int ma_seat;
	private static final int fieldNumberMa_seat = 5;
	private final boolean hasMa_seat;

	private final int banker_seat;
	private static final int fieldNumberBanker_seat = 6;
	private final boolean hasBanker_seat;

	private final int service_gold;
	private static final int fieldNumberService_gold = 7;
	private final boolean hasService_gold;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_start_game(final Builder builder) {
			this.other_infoes = builder.other_infoes;
			this.you_seq_info = builder.you_seq_info;
			this.hasYou_seq_info = builder.hasYou_seq_info;
			this.starter_seat_index = builder.starter_seat_index;
			this.hasStarter_seat_index = builder.hasStarter_seat_index;
			this.tiles_remain = builder.tiles_remain;
			this.hasTiles_remain = builder.hasTiles_remain;
			this.ma_seat = builder.ma_seat;
			this.hasMa_seat = builder.hasMa_seat;
			this.banker_seat = builder.banker_seat;
			this.hasBanker_seat = builder.hasBanker_seat;
			this.service_gold = builder.service_gold;
			this.hasService_gold = builder.hasService_gold;
			}

	public static class Builder {
		private java.util.Vector other_infoes = new java.util.Vector();
		private boolean hasOther_infoes = false;

		private hand_seq_info you_seq_info;
		private boolean hasYou_seq_info = false;

		private int starter_seat_index;
		private boolean hasStarter_seat_index = false;

		private int tiles_remain;
		private boolean hasTiles_remain = false;

		private int ma_seat;
		private boolean hasMa_seat = false;

		private int banker_seat;
		private boolean hasBanker_seat = false;

		private int service_gold;
		private boolean hasService_gold = false;


		private Builder() {
		}

		public Builder setOther_infoes(final java.util.Vector other_infoes) {
			if(!hasOther_infoes) {
				hasOther_infoes = true;
			}
			this.other_infoes = other_infoes;
			return this;
		}


		public Builder addElementOther_infoes(final hand_seq_info element) {
			if(!hasOther_infoes) {
				hasOther_infoes = true;
			}
			other_infoes.addElement(element);
			return this;
		}

		public Builder setYou_seq_info(final hand_seq_info you_seq_info) {
			this.you_seq_info = you_seq_info;
			this.hasYou_seq_info = true;
			return this;
		}

		public Builder setStarter_seat_index(final int starter_seat_index) {
			this.starter_seat_index = starter_seat_index;
			this.hasStarter_seat_index = true;
			return this;
		}

		public Builder setTiles_remain(final int tiles_remain) {
			this.tiles_remain = tiles_remain;
			this.hasTiles_remain = true;
			return this;
		}

		public Builder setMa_seat(final int ma_seat) {
			this.ma_seat = ma_seat;
			this.hasMa_seat = true;
			return this;
		}

		public Builder setBanker_seat(final int banker_seat) {
			this.banker_seat = banker_seat;
			this.hasBanker_seat = true;
			return this;
		}

		public Builder setService_gold(final int service_gold) {
			this.service_gold = service_gold;
			this.hasService_gold = true;
			return this;
		}

		public sc_start_game build() {
			return new sc_start_game(this);
		}
	}

	public java.util.Vector getOther_infoes() {
		return other_infoes;
	}

	public hand_seq_info getYou_seq_info() {
		return you_seq_info;
	}

	public boolean hasYou_seq_info() {
		return hasYou_seq_info;
	}

	public int getStarter_seat_index() {
		return starter_seat_index;
	}

	public boolean hasStarter_seat_index() {
		return hasStarter_seat_index;
	}

	public int getTiles_remain() {
		return tiles_remain;
	}

	public boolean hasTiles_remain() {
		return hasTiles_remain;
	}

	public int getMa_seat() {
		return ma_seat;
	}

	public boolean hasMa_seat() {
		return hasMa_seat;
	}

	public int getBanker_seat() {
		return banker_seat;
	}

	public boolean hasBanker_seat() {
		return hasBanker_seat;
	}

	public int getService_gold() {
		return service_gold;
	}

	public boolean hasService_gold() {
		return hasService_gold;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "other_infoes = " + this.other_infoes + TAB;
		if(hasYou_seq_info) retValue += "you_seq_info = " + this.you_seq_info + TAB;
		if(hasStarter_seat_index) retValue += "starter_seat_index = " + this.starter_seat_index + TAB;
		if(hasTiles_remain) retValue += "tiles_remain = " + this.tiles_remain + TAB;
		if(hasMa_seat) retValue += "ma_seat = " + this.ma_seat + TAB;
		if(hasBanker_seat) retValue += "banker_seat = " + this.banker_seat + TAB;
		if(hasService_gold) retValue += "service_gold = " + this.service_gold + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasStarter_seat_index) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberStarter_seat_index, starter_seat_index);
		if(hasTiles_remain) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTiles_remain, tiles_remain);
		if(hasMa_seat) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberMa_seat, ma_seat);
		if(hasBanker_seat) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberBanker_seat, banker_seat);
		if(hasService_gold) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberService_gold, service_gold);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberOther_infoes, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, other_infoes);
		if(hasYou_seq_info) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberYou_seq_info, you_seq_info.computeSize());

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeList(fieldNumberOther_infoes, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, other_infoes);
		if(hasYou_seq_info) { writer.writeMessage(fieldNumberYou_seq_info, you_seq_info.computeSize()); you_seq_info.writeFields(writer); }
		if(hasStarter_seat_index) writer.writeInt(fieldNumberStarter_seat_index, starter_seat_index);
		if(hasTiles_remain) writer.writeInt(fieldNumberTiles_remain, tiles_remain);
		if(hasMa_seat) writer.writeInt(fieldNumberMa_seat, ma_seat);
		if(hasBanker_seat) writer.writeInt(fieldNumberBanker_seat, banker_seat);
		if(hasService_gold) writer.writeInt(fieldNumberService_gold, service_gold);
	}

	static sc_start_game parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_start_game.Builder builder = sc_start_game.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberOther_infoes:
			 java.util.Vector vcOther_infoes = reader.readMessages(fieldNumberOther_infoes);
				for(int i = 0 ; i < vcOther_infoes.size(); i++) {
					byte[] eachBinData = (byte[]) vcOther_infoes.elementAt(i);
					hand_seq_info.Builder builderOther_infoes = hand_seq_info.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolOther_infoes = true;
					int nestedFieldOther_infoes = -1;
					while(boolOther_infoes) {
						nestedFieldOther_infoes = getNextFieldNumber(innerInputReader);
						boolOther_infoes = hand_seq_info.populateBuilderWithField(innerInputReader, builderOther_infoes, nestedFieldOther_infoes);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementOther_infoes(builderOther_infoes.build());
				}
				break;
			case fieldNumberYou_seq_info:
			 java.util.Vector vcYou_seq_info = reader.readMessages(fieldNumberYou_seq_info);
				for(int i = 0 ; i < vcYou_seq_info.size(); i++) {
					byte[] eachBinData = (byte[]) vcYou_seq_info.elementAt(i);
					hand_seq_info.Builder builderYou_seq_info = hand_seq_info.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolYou_seq_info = true;
					int nestedFieldYou_seq_info = -1;
					while(boolYou_seq_info) {
						nestedFieldYou_seq_info = getNextFieldNumber(innerInputReader);
						boolYou_seq_info = hand_seq_info.populateBuilderWithField(innerInputReader, builderYou_seq_info, nestedFieldYou_seq_info);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setYou_seq_info(builderYou_seq_info.build());
				}
				break;
			case fieldNumberStarter_seat_index:
				builder.setStarter_seat_index(reader.readInt(fieldNumber));
				break;
			case fieldNumberTiles_remain:
				builder.setTiles_remain(reader.readInt(fieldNumber));
				break;
			case fieldNumberMa_seat:
				builder.setMa_seat(reader.readInt(fieldNumber));
				break;
			case fieldNumberBanker_seat:
				builder.setBanker_seat(reader.readInt(fieldNumber));
				break;
			case fieldNumberService_gold:
				builder.setService_gold(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_start_game.unknownTagHandler = unknownTagHandler;
	}

	public static sc_start_game parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_start_game parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_start_game parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}