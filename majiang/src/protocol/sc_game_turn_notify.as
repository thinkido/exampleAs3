package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_game_turn_notify extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int timeout;
	private static final int fieldNumberTimeout = 1;
	private final boolean hasTimeout;

	private final int seat_index;
	private static final int fieldNumberSeat_index = 2;
	private final boolean hasSeat_index;

	private final boolean mo;
	private static final int fieldNumberMo = 3;
	private final boolean hasMo;

	private final java.util.Vector mo_tiles;
	private static final int fieldNumberMo_tiles = 4;

	private final int tiles_remain;
	private static final int fieldNumberTiles_remain = 5;
	private final boolean hasTiles_remain;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_game_turn_notify(final Builder builder) {
			this.timeout = builder.timeout;
			this.hasTimeout = builder.hasTimeout;
			this.seat_index = builder.seat_index;
			this.hasSeat_index = builder.hasSeat_index;
			this.mo = builder.mo;
			this.hasMo = builder.hasMo;
			this.mo_tiles = builder.mo_tiles;
			this.tiles_remain = builder.tiles_remain;
			this.hasTiles_remain = builder.hasTiles_remain;
			}

	public static class Builder {
		private int timeout;
		private boolean hasTimeout = false;

		private int seat_index;
		private boolean hasSeat_index = false;

		private boolean mo;
		private boolean hasMo = false;

		private java.util.Vector mo_tiles = new java.util.Vector();
		private boolean hasMo_tiles = false;

		private int tiles_remain;
		private boolean hasTiles_remain = false;


		private Builder() {
		}

		public Builder setTimeout(final int timeout) {
			this.timeout = timeout;
			this.hasTimeout = true;
			return this;
		}

		public Builder setSeat_index(final int seat_index) {
			this.seat_index = seat_index;
			this.hasSeat_index = true;
			return this;
		}

		public Builder setMo(final boolean mo) {
			this.mo = mo;
			this.hasMo = true;
			return this;
		}

		public Builder setMo_tiles(final java.util.Vector mo_tiles) {
			if(!hasMo_tiles) {
				hasMo_tiles = true;
			}
			this.mo_tiles = mo_tiles;
			return this;
		}


		public Builder addElementMo_tiles(final int element) {
			if(!hasMo_tiles) {
				hasMo_tiles = true;
			}
			mo_tiles.addElement(new Integer(element));
			return this;
		}

		public Builder setTiles_remain(final int tiles_remain) {
			this.tiles_remain = tiles_remain;
			this.hasTiles_remain = true;
			return this;
		}

		public sc_game_turn_notify build() {
			return new sc_game_turn_notify(this);
		}
	}

	public int getTimeout() {
		return timeout;
	}

	public boolean hasTimeout() {
		return hasTimeout;
	}

	public int getSeat_index() {
		return seat_index;
	}

	public boolean hasSeat_index() {
		return hasSeat_index;
	}

	public boolean getMo() {
		return mo;
	}

	public boolean hasMo() {
		return hasMo;
	}

	public java.util.Vector getMo_tiles() {
		return mo_tiles;
	}

	public int getTiles_remain() {
		return tiles_remain;
	}

	public boolean hasTiles_remain() {
		return hasTiles_remain;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasTimeout) retValue += "timeout = " + this.timeout + TAB;
		if(hasSeat_index) retValue += "seat_index = " + this.seat_index + TAB;
		if(hasMo) retValue += "mo = " + this.mo + TAB;
		retValue += "mo_tiles = " + this.mo_tiles + TAB;
		if(hasTiles_remain) retValue += "tiles_remain = " + this.tiles_remain + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasTimeout) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTimeout, timeout);
		if(hasSeat_index) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSeat_index, seat_index);
		if(hasMo) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberMo, mo);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberMo_tiles, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, mo_tiles);
		if(hasTiles_remain) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTiles_remain, tiles_remain);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasTimeout) writer.writeInt(fieldNumberTimeout, timeout);
		if(hasSeat_index) writer.writeInt(fieldNumberSeat_index, seat_index);
		if(hasMo) writer.writeBoolean(fieldNumberMo, mo);
		writer.writeList(fieldNumberMo_tiles, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, mo_tiles);
		if(hasTiles_remain) writer.writeInt(fieldNumberTiles_remain, tiles_remain);
	}

	static sc_game_turn_notify parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_game_turn_notify.Builder builder = sc_game_turn_notify.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberTimeout:
				builder.setTimeout(reader.readInt(fieldNumber));
				break;
			case fieldNumberSeat_index:
				builder.setSeat_index(reader.readInt(fieldNumber));
				break;
			case fieldNumberMo:
				builder.setMo(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberMo_tiles:
				builder.addElementMo_tiles(reader.readInt(fieldNumber));
				break;
			case fieldNumberTiles_remain:
				builder.setTiles_remain(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_game_turn_notify.unknownTagHandler = unknownTagHandler;
	}

	public static sc_game_turn_notify parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_game_turn_notify parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_game_turn_notify parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}