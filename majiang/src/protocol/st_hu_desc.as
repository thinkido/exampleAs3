package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class st_hu_desc extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int type1;
	private static final int fieldNumberType1 = 1;
	private final boolean hasType1;

	private final int type2;
	private static final int fieldNumberType2 = 2;
	private final boolean hasType2;

	private final int gen;
	private static final int fieldNumberGen = 3;
	private final boolean hasGen;

	private final boolean self_mo;
	private static final int fieldNumberSelf_mo = 4;
	private final boolean hasSelf_mo;

	private final int type;
	private static final int fieldNumberType = 5;
	private final boolean hasType;

	private final int fan;
	private static final int fieldNumberFan = 6;
	private final boolean hasFan;


	public static Builder newBuilder() {
		return new Builder();
	}

	private st_hu_desc(final Builder builder) {
			this.type1 = builder.type1;
			this.hasType1 = builder.hasType1;
			this.type2 = builder.type2;
			this.hasType2 = builder.hasType2;
			this.gen = builder.gen;
			this.hasGen = builder.hasGen;
			this.self_mo = builder.self_mo;
			this.hasSelf_mo = builder.hasSelf_mo;
			this.type = builder.type;
			this.hasType = builder.hasType;
			this.fan = builder.fan;
			this.hasFan = builder.hasFan;
			}

	public static class Builder {
		private int type1;
		private boolean hasType1 = false;

		private int type2;
		private boolean hasType2 = false;

		private int gen;
		private boolean hasGen = false;

		private boolean self_mo;
		private boolean hasSelf_mo = false;

		private int type;
		private boolean hasType = false;

		private int fan;
		private boolean hasFan = false;


		private Builder() {
		}

		public Builder setType1(final int type1) {
			this.type1 = type1;
			this.hasType1 = true;
			return this;
		}

		public Builder setType2(final int type2) {
			this.type2 = type2;
			this.hasType2 = true;
			return this;
		}

		public Builder setGen(final int gen) {
			this.gen = gen;
			this.hasGen = true;
			return this;
		}

		public Builder setSelf_mo(final boolean self_mo) {
			this.self_mo = self_mo;
			this.hasSelf_mo = true;
			return this;
		}

		public Builder setType(final int type) {
			this.type = type;
			this.hasType = true;
			return this;
		}

		public Builder setFan(final int fan) {
			this.fan = fan;
			this.hasFan = true;
			return this;
		}

		public st_hu_desc build() {
			return new st_hu_desc(this);
		}
	}

	public int getType1() {
		return type1;
	}

	public boolean hasType1() {
		return hasType1;
	}

	public int getType2() {
		return type2;
	}

	public boolean hasType2() {
		return hasType2;
	}

	public int getGen() {
		return gen;
	}

	public boolean hasGen() {
		return hasGen;
	}

	public boolean getSelf_mo() {
		return self_mo;
	}

	public boolean hasSelf_mo() {
		return hasSelf_mo;
	}

	public int getType() {
		return type;
	}

	public boolean hasType() {
		return hasType;
	}

	public int getFan() {
		return fan;
	}

	public boolean hasFan() {
		return hasFan;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasType1) retValue += "type1 = " + this.type1 + TAB;
		if(hasType2) retValue += "type2 = " + this.type2 + TAB;
		if(hasGen) retValue += "gen = " + this.gen + TAB;
		if(hasSelf_mo) retValue += "self_mo = " + this.self_mo + TAB;
		if(hasType) retValue += "type = " + this.type + TAB;
		if(hasFan) retValue += "fan = " + this.fan + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasType1) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberType1, type1);
		if(hasType2) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberType2, type2);
		if(hasGen) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberGen, gen);
		if(hasSelf_mo) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberSelf_mo, self_mo);
		if(hasType) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberType, type);
		if(hasFan) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberFan, fan);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasType1) writer.writeInt(fieldNumberType1, type1);
		if(hasType2) writer.writeInt(fieldNumberType2, type2);
		if(hasGen) writer.writeInt(fieldNumberGen, gen);
		if(hasSelf_mo) writer.writeBoolean(fieldNumberSelf_mo, self_mo);
		if(hasType) writer.writeInt(fieldNumberType, type);
		if(hasFan) writer.writeInt(fieldNumberFan, fan);
	}

	static st_hu_desc parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final st_hu_desc.Builder builder = st_hu_desc.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberType1:
				builder.setType1(reader.readInt(fieldNumber));
				break;
			case fieldNumberType2:
				builder.setType2(reader.readInt(fieldNumber));
				break;
			case fieldNumberGen:
				builder.setGen(reader.readInt(fieldNumber));
				break;
			case fieldNumberSelf_mo:
				builder.setSelf_mo(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberType:
				builder.setType(reader.readInt(fieldNumber));
				break;
			case fieldNumberFan:
				builder.setFan(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		st_hu_desc.unknownTagHandler = unknownTagHandler;
	}

	public static st_hu_desc parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static st_hu_desc parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static st_hu_desc parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}