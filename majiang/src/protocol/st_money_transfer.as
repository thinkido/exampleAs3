package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class st_money_transfer extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int person;
	private static final int fieldNumberPerson = 1;
	private final boolean hasPerson;

	private final int atm;
	private static final int fieldNumberAtm = 2;
	private final boolean hasAtm;

	private final int money;
	private static final int fieldNumberMoney = 3;
	private final boolean hasMoney;

	private final int transfer;
	private static final int fieldNumberTransfer = 4;
	private final boolean hasTransfer;


	public static Builder newBuilder() {
		return new Builder();
	}

	private st_money_transfer(final Builder builder) {
			this.person = builder.person;
			this.hasPerson = builder.hasPerson;
			this.atm = builder.atm;
			this.hasAtm = builder.hasAtm;
			this.money = builder.money;
			this.hasMoney = builder.hasMoney;
			this.transfer = builder.transfer;
			this.hasTransfer = builder.hasTransfer;
			}

	public static class Builder {
		private int person;
		private boolean hasPerson = false;

		private int atm;
		private boolean hasAtm = false;

		private int money;
		private boolean hasMoney = false;

		private int transfer;
		private boolean hasTransfer = false;


		private Builder() {
		}

		public Builder setPerson(final int person) {
			this.person = person;
			this.hasPerson = true;
			return this;
		}

		public Builder setAtm(final int atm) {
			this.atm = atm;
			this.hasAtm = true;
			return this;
		}

		public Builder setMoney(final int money) {
			this.money = money;
			this.hasMoney = true;
			return this;
		}

		public Builder setTransfer(final int transfer) {
			this.transfer = transfer;
			this.hasTransfer = true;
			return this;
		}

		public st_money_transfer build() {
			return new st_money_transfer(this);
		}
	}

	public int getPerson() {
		return person;
	}

	public boolean hasPerson() {
		return hasPerson;
	}

	public int getAtm() {
		return atm;
	}

	public boolean hasAtm() {
		return hasAtm;
	}

	public int getMoney() {
		return money;
	}

	public boolean hasMoney() {
		return hasMoney;
	}

	public int getTransfer() {
		return transfer;
	}

	public boolean hasTransfer() {
		return hasTransfer;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasPerson) retValue += "person = " + this.person + TAB;
		if(hasAtm) retValue += "atm = " + this.atm + TAB;
		if(hasMoney) retValue += "money = " + this.money + TAB;
		if(hasTransfer) retValue += "transfer = " + this.transfer + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasPerson) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberPerson, person);
		if(hasAtm) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberAtm, atm);
		if(hasMoney) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberMoney, money);
		if(hasTransfer) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTransfer, transfer);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasPerson) writer.writeInt(fieldNumberPerson, person);
		if(hasAtm) writer.writeInt(fieldNumberAtm, atm);
		if(hasMoney) writer.writeInt(fieldNumberMoney, money);
		if(hasTransfer) writer.writeInt(fieldNumberTransfer, transfer);
	}

	static st_money_transfer parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final st_money_transfer.Builder builder = st_money_transfer.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberPerson:
				builder.setPerson(reader.readInt(fieldNumber));
				break;
			case fieldNumberAtm:
				builder.setAtm(reader.readInt(fieldNumber));
				break;
			case fieldNumberMoney:
				builder.setMoney(reader.readInt(fieldNumber));
				break;
			case fieldNumberTransfer:
				builder.setTransfer(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		st_money_transfer.unknownTagHandler = unknownTagHandler;
	}

	public static st_money_transfer parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static st_money_transfer parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static st_money_transfer parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}