package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class t_egg_item extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int egg_index;
	private static final int fieldNumberEgg_index = 1;
	private final boolean hasEgg_index;

	private final boolean egg_available;
	private static final int fieldNumberEgg_available = 2;
	private final boolean hasEgg_available;


	public static Builder newBuilder() {
		return new Builder();
	}

	private t_egg_item(final Builder builder) {
			this.egg_index = builder.egg_index;
			this.hasEgg_index = builder.hasEgg_index;
			this.egg_available = builder.egg_available;
			this.hasEgg_available = builder.hasEgg_available;
			}

	public static class Builder {
		private int egg_index;
		private boolean hasEgg_index = false;

		private boolean egg_available;
		private boolean hasEgg_available = false;


		private Builder() {
		}

		public Builder setEgg_index(final int egg_index) {
			this.egg_index = egg_index;
			this.hasEgg_index = true;
			return this;
		}

		public Builder setEgg_available(final boolean egg_available) {
			this.egg_available = egg_available;
			this.hasEgg_available = true;
			return this;
		}

		public t_egg_item build() {
			return new t_egg_item(this);
		}
	}

	public int getEgg_index() {
		return egg_index;
	}

	public boolean hasEgg_index() {
		return hasEgg_index;
	}

	public boolean getEgg_available() {
		return egg_available;
	}

	public boolean hasEgg_available() {
		return hasEgg_available;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasEgg_index) retValue += "egg_index = " + this.egg_index + TAB;
		if(hasEgg_available) retValue += "egg_available = " + this.egg_available + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasEgg_index) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberEgg_index, egg_index);
		if(hasEgg_available) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberEgg_available, egg_available);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasEgg_index) writer.writeInt(fieldNumberEgg_index, egg_index);
		if(hasEgg_available) writer.writeBoolean(fieldNumberEgg_available, egg_available);
	}

	static t_egg_item parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final t_egg_item.Builder builder = t_egg_item.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberEgg_index:
				builder.setEgg_index(reader.readInt(fieldNumber));
				break;
			case fieldNumberEgg_available:
				builder.setEgg_available(reader.readBoolean(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		t_egg_item.unknownTagHandler = unknownTagHandler;
	}

	public static t_egg_item parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static t_egg_item parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static t_egg_item parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}