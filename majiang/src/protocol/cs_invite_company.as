package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:16 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class cs_invite_company extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final String name;
	private static final int fieldNumberName = 1;
	private final boolean hasName;

	private final int seat;
	private static final int fieldNumberSeat = 2;
	private final boolean hasSeat;

	private final String host;
	private static final int fieldNumberHost = 3;
	private final boolean hasHost;

	private final int port;
	private static final int fieldNumberPort = 4;
	private final boolean hasPort;

	private final int roomid;
	private static final int fieldNumberRoomid = 5;
	private final boolean hasRoomid;

	private final String id;
	private static final int fieldNumberId = 6;
	private final boolean hasId;

	private final String idtype;
	private static final int fieldNumberIdtype = 7;
	private final boolean hasIdtype;


	public static Builder newBuilder() {
		return new Builder();
	}

	private cs_invite_company(final Builder builder) {
			this.name = builder.name;
			this.hasName = builder.hasName;
			this.seat = builder.seat;
			this.hasSeat = builder.hasSeat;
			this.host = builder.host;
			this.hasHost = builder.hasHost;
			this.port = builder.port;
			this.hasPort = builder.hasPort;
			this.roomid = builder.roomid;
			this.hasRoomid = builder.hasRoomid;
			this.id = builder.id;
			this.hasId = builder.hasId;
			this.idtype = builder.idtype;
			this.hasIdtype = builder.hasIdtype;
			}

	public static class Builder {
		private String name;
		private boolean hasName = false;

		private int seat;
		private boolean hasSeat = false;

		private String host;
		private boolean hasHost = false;

		private int port;
		private boolean hasPort = false;

		private int roomid;
		private boolean hasRoomid = false;

		private String id;
		private boolean hasId = false;

		private String idtype;
		private boolean hasIdtype = false;


		private Builder() {
		}

		public Builder setName(final String name) {
			this.name = name;
			this.hasName = true;
			return this;
		}

		public Builder setSeat(final int seat) {
			this.seat = seat;
			this.hasSeat = true;
			return this;
		}

		public Builder setHost(final String host) {
			this.host = host;
			this.hasHost = true;
			return this;
		}

		public Builder setPort(final int port) {
			this.port = port;
			this.hasPort = true;
			return this;
		}

		public Builder setRoomid(final int roomid) {
			this.roomid = roomid;
			this.hasRoomid = true;
			return this;
		}

		public Builder setId(final String id) {
			this.id = id;
			this.hasId = true;
			return this;
		}

		public Builder setIdtype(final String idtype) {
			this.idtype = idtype;
			this.hasIdtype = true;
			return this;
		}

		public cs_invite_company build() {
			return new cs_invite_company(this);
		}
	}

	public String getName() {
		return name;
	}

	public boolean hasName() {
		return hasName;
	}

	public int getSeat() {
		return seat;
	}

	public boolean hasSeat() {
		return hasSeat;
	}

	public String getHost() {
		return host;
	}

	public boolean hasHost() {
		return hasHost;
	}

	public int getPort() {
		return port;
	}

	public boolean hasPort() {
		return hasPort;
	}

	public int getRoomid() {
		return roomid;
	}

	public boolean hasRoomid() {
		return hasRoomid;
	}

	public String getId() {
		return id;
	}

	public boolean hasId() {
		return hasId;
	}

	public String getIdtype() {
		return idtype;
	}

	public boolean hasIdtype() {
		return hasIdtype;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasName) retValue += "name = " + this.name + TAB;
		if(hasSeat) retValue += "seat = " + this.seat + TAB;
		if(hasHost) retValue += "host = " + this.host + TAB;
		if(hasPort) retValue += "port = " + this.port + TAB;
		if(hasRoomid) retValue += "roomid = " + this.roomid + TAB;
		if(hasId) retValue += "id = " + this.id + TAB;
		if(hasIdtype) retValue += "idtype = " + this.idtype + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasName) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberName, name);
		if(hasSeat) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSeat, seat);
		if(hasHost) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberHost, host);
		if(hasPort) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberPort, port);
		if(hasRoomid) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberRoomid, roomid);
		if(hasId) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberId, id);
		if(hasIdtype) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberIdtype, idtype);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasName) writer.writeString(fieldNumberName, name);
		if(hasSeat) writer.writeInt(fieldNumberSeat, seat);
		if(hasHost) writer.writeString(fieldNumberHost, host);
		if(hasPort) writer.writeInt(fieldNumberPort, port);
		if(hasRoomid) writer.writeInt(fieldNumberRoomid, roomid);
		if(hasId) writer.writeString(fieldNumberId, id);
		if(hasIdtype) writer.writeString(fieldNumberIdtype, idtype);
	}

	static cs_invite_company parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final cs_invite_company.Builder builder = cs_invite_company.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberName:
				builder.setName(reader.readString(fieldNumber));
				break;
			case fieldNumberSeat:
				builder.setSeat(reader.readInt(fieldNumber));
				break;
			case fieldNumberHost:
				builder.setHost(reader.readString(fieldNumber));
				break;
			case fieldNumberPort:
				builder.setPort(reader.readInt(fieldNumber));
				break;
			case fieldNumberRoomid:
				builder.setRoomid(reader.readInt(fieldNumber));
				break;
			case fieldNumberId:
				builder.setId(reader.readString(fieldNumber));
				break;
			case fieldNumberIdtype:
				builder.setIdtype(reader.readString(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		cs_invite_company.unknownTagHandler = unknownTagHandler;
	}

	public static cs_invite_company parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static cs_invite_company parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static cs_invite_company parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}