package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sccontinue_seat_info extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int seat_index;
	private static final int fieldNumberSeat_index = 1;
	private final boolean hasSeat_index;

	private final stplayer_info player_info;
	private static final int fieldNumberPlayer_info = 2;
	private final boolean hasPlayer_info;

	private final boolean ready;
	private static final int fieldNumberReady = 3;
	private final boolean hasReady;

	private final int lack;
	private static final int fieldNumberLack = 4;
	private final boolean hasLack;

	private final boolean is_hu;
	private static final int fieldNumberIs_hu = 5;
	private final boolean hasIs_hu;

	private final java.util.Vector hu_seq;
	private static final int fieldNumberHu_seq = 6;

	private final int hand_seq_count;
	private static final int fieldNumberHand_seq_count = 7;
	private final boolean hasHand_seq_count;

	private final int mo_count;
	private static final int fieldNumberMo_count = 8;
	private final boolean hasMo_count;

	private final st_hand_seq hand_seq;
	private static final int fieldNumberHand_seq = 9;
	private final boolean hasHand_seq;

	private final java.util.Vector complex_seq;
	private static final int fieldNumberComplex_seq = 10;

	private final java.util.Vector chued_seq;
	private static final int fieldNumberChued_seq = 11;

	private final java.util.Vector hu_desc;
	private static final int fieldNumberHu_desc = 12;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sccontinue_seat_info(final Builder builder) {
			this.seat_index = builder.seat_index;
			this.hasSeat_index = builder.hasSeat_index;
			this.player_info = builder.player_info;
			this.hasPlayer_info = builder.hasPlayer_info;
			this.ready = builder.ready;
			this.hasReady = builder.hasReady;
			this.lack = builder.lack;
			this.hasLack = builder.hasLack;
			this.is_hu = builder.is_hu;
			this.hasIs_hu = builder.hasIs_hu;
			this.hu_seq = builder.hu_seq;
			this.hand_seq_count = builder.hand_seq_count;
			this.hasHand_seq_count = builder.hasHand_seq_count;
			this.mo_count = builder.mo_count;
			this.hasMo_count = builder.hasMo_count;
			this.hand_seq = builder.hand_seq;
			this.hasHand_seq = builder.hasHand_seq;
			this.complex_seq = builder.complex_seq;
			this.chued_seq = builder.chued_seq;
			this.hu_desc = builder.hu_desc;
			}

	public static class Builder {
		private int seat_index;
		private boolean hasSeat_index = false;

		private stplayer_info player_info;
		private boolean hasPlayer_info = false;

		private boolean ready;
		private boolean hasReady = false;

		private int lack;
		private boolean hasLack = false;

		private boolean is_hu;
		private boolean hasIs_hu = false;

		private java.util.Vector hu_seq = new java.util.Vector();
		private boolean hasHu_seq = false;

		private int hand_seq_count;
		private boolean hasHand_seq_count = false;

		private int mo_count;
		private boolean hasMo_count = false;

		private st_hand_seq hand_seq;
		private boolean hasHand_seq = false;

		private java.util.Vector complex_seq = new java.util.Vector();
		private boolean hasComplex_seq = false;

		private java.util.Vector chued_seq = new java.util.Vector();
		private boolean hasChued_seq = false;

		private java.util.Vector hu_desc = new java.util.Vector();
		private boolean hasHu_desc = false;


		private Builder() {
		}

		public Builder setSeat_index(final int seat_index) {
			this.seat_index = seat_index;
			this.hasSeat_index = true;
			return this;
		}

		public Builder setPlayer_info(final stplayer_info player_info) {
			this.player_info = player_info;
			this.hasPlayer_info = true;
			return this;
		}

		public Builder setReady(final boolean ready) {
			this.ready = ready;
			this.hasReady = true;
			return this;
		}

		public Builder setLack(final int lack) {
			this.lack = lack;
			this.hasLack = true;
			return this;
		}

		public Builder setIs_hu(final boolean is_hu) {
			this.is_hu = is_hu;
			this.hasIs_hu = true;
			return this;
		}

		public Builder setHu_seq(final java.util.Vector hu_seq) {
			if(!hasHu_seq) {
				hasHu_seq = true;
			}
			this.hu_seq = hu_seq;
			return this;
		}


		public Builder addElementHu_seq(final int element) {
			if(!hasHu_seq) {
				hasHu_seq = true;
			}
			hu_seq.addElement(new Integer(element));
			return this;
		}

		public Builder setHand_seq_count(final int hand_seq_count) {
			this.hand_seq_count = hand_seq_count;
			this.hasHand_seq_count = true;
			return this;
		}

		public Builder setMo_count(final int mo_count) {
			this.mo_count = mo_count;
			this.hasMo_count = true;
			return this;
		}

		public Builder setHand_seq(final st_hand_seq hand_seq) {
			this.hand_seq = hand_seq;
			this.hasHand_seq = true;
			return this;
		}

		public Builder setComplex_seq(final java.util.Vector complex_seq) {
			if(!hasComplex_seq) {
				hasComplex_seq = true;
			}
			this.complex_seq = complex_seq;
			return this;
		}


		public Builder addElementComplex_seq(final sccomplex_tile element) {
			if(!hasComplex_seq) {
				hasComplex_seq = true;
			}
			complex_seq.addElement(element);
			return this;
		}

		public Builder setChued_seq(final java.util.Vector chued_seq) {
			if(!hasChued_seq) {
				hasChued_seq = true;
			}
			this.chued_seq = chued_seq;
			return this;
		}


		public Builder addElementChued_seq(final int element) {
			if(!hasChued_seq) {
				hasChued_seq = true;
			}
			chued_seq.addElement(new Integer(element));
			return this;
		}

		public Builder setHu_desc(final java.util.Vector hu_desc) {
			if(!hasHu_desc) {
				hasHu_desc = true;
			}
			this.hu_desc = hu_desc;
			return this;
		}


		public Builder addElementHu_desc(final st_hu_desc element) {
			if(!hasHu_desc) {
				hasHu_desc = true;
			}
			hu_desc.addElement(element);
			return this;
		}

		public sccontinue_seat_info build() {
			return new sccontinue_seat_info(this);
		}
	}

	public int getSeat_index() {
		return seat_index;
	}

	public boolean hasSeat_index() {
		return hasSeat_index;
	}

	public stplayer_info getPlayer_info() {
		return player_info;
	}

	public boolean hasPlayer_info() {
		return hasPlayer_info;
	}

	public boolean getReady() {
		return ready;
	}

	public boolean hasReady() {
		return hasReady;
	}

	public int getLack() {
		return lack;
	}

	public boolean hasLack() {
		return hasLack;
	}

	public boolean getIs_hu() {
		return is_hu;
	}

	public boolean hasIs_hu() {
		return hasIs_hu;
	}

	public java.util.Vector getHu_seq() {
		return hu_seq;
	}

	public int getHand_seq_count() {
		return hand_seq_count;
	}

	public boolean hasHand_seq_count() {
		return hasHand_seq_count;
	}

	public int getMo_count() {
		return mo_count;
	}

	public boolean hasMo_count() {
		return hasMo_count;
	}

	public st_hand_seq getHand_seq() {
		return hand_seq;
	}

	public boolean hasHand_seq() {
		return hasHand_seq;
	}

	public java.util.Vector getComplex_seq() {
		return complex_seq;
	}

	public java.util.Vector getChued_seq() {
		return chued_seq;
	}

	public java.util.Vector getHu_desc() {
		return hu_desc;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasSeat_index) retValue += "seat_index = " + this.seat_index + TAB;
		if(hasPlayer_info) retValue += "player_info = " + this.player_info + TAB;
		if(hasReady) retValue += "ready = " + this.ready + TAB;
		if(hasLack) retValue += "lack = " + this.lack + TAB;
		if(hasIs_hu) retValue += "is_hu = " + this.is_hu + TAB;
		retValue += "hu_seq = " + this.hu_seq + TAB;
		if(hasHand_seq_count) retValue += "hand_seq_count = " + this.hand_seq_count + TAB;
		if(hasMo_count) retValue += "mo_count = " + this.mo_count + TAB;
		if(hasHand_seq) retValue += "hand_seq = " + this.hand_seq + TAB;
		retValue += "complex_seq = " + this.complex_seq + TAB;
		retValue += "chued_seq = " + this.chued_seq + TAB;
		retValue += "hu_desc = " + this.hu_desc + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasSeat_index) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSeat_index, seat_index);
		if(hasReady) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberReady, ready);
		if(hasLack) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberLack, lack);
		if(hasIs_hu) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberIs_hu, is_hu);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberHu_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, hu_seq);
		if(hasHand_seq_count) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberHand_seq_count, hand_seq_count);
		if(hasMo_count) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberMo_count, mo_count);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberChued_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, chued_seq);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasPlayer_info) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberPlayer_info, player_info.computeSize());
		if(hasHand_seq) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberHand_seq, hand_seq.computeSize());
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberComplex_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, complex_seq);
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberHu_desc, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, hu_desc);

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasSeat_index) writer.writeInt(fieldNumberSeat_index, seat_index);
		if(hasPlayer_info) { writer.writeMessage(fieldNumberPlayer_info, player_info.computeSize()); player_info.writeFields(writer); }
		if(hasReady) writer.writeBoolean(fieldNumberReady, ready);
		if(hasLack) writer.writeInt(fieldNumberLack, lack);
		if(hasIs_hu) writer.writeBoolean(fieldNumberIs_hu, is_hu);
		writer.writeList(fieldNumberHu_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, hu_seq);
		if(hasHand_seq_count) writer.writeInt(fieldNumberHand_seq_count, hand_seq_count);
		if(hasMo_count) writer.writeInt(fieldNumberMo_count, mo_count);
		if(hasHand_seq) { writer.writeMessage(fieldNumberHand_seq, hand_seq.computeSize()); hand_seq.writeFields(writer); }
		writer.writeList(fieldNumberComplex_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, complex_seq);
		writer.writeList(fieldNumberChued_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, chued_seq);
		writer.writeList(fieldNumberHu_desc, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, hu_desc);
	}

	static sccontinue_seat_info parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sccontinue_seat_info.Builder builder = sccontinue_seat_info.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberSeat_index:
				builder.setSeat_index(reader.readInt(fieldNumber));
				break;
			case fieldNumberPlayer_info:
			 java.util.Vector vcPlayer_info = reader.readMessages(fieldNumberPlayer_info);
				for(int i = 0 ; i < vcPlayer_info.size(); i++) {
					byte[] eachBinData = (byte[]) vcPlayer_info.elementAt(i);
					stplayer_info.Builder builderPlayer_info = stplayer_info.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolPlayer_info = true;
					int nestedFieldPlayer_info = -1;
					while(boolPlayer_info) {
						nestedFieldPlayer_info = getNextFieldNumber(innerInputReader);
						boolPlayer_info = stplayer_info.populateBuilderWithField(innerInputReader, builderPlayer_info, nestedFieldPlayer_info);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setPlayer_info(builderPlayer_info.build());
				}
				break;
			case fieldNumberReady:
				builder.setReady(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberLack:
				builder.setLack(reader.readInt(fieldNumber));
				break;
			case fieldNumberIs_hu:
				builder.setIs_hu(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberHu_seq:
				builder.addElementHu_seq(reader.readInt(fieldNumber));
				break;
			case fieldNumberHand_seq_count:
				builder.setHand_seq_count(reader.readInt(fieldNumber));
				break;
			case fieldNumberMo_count:
				builder.setMo_count(reader.readInt(fieldNumber));
				break;
			case fieldNumberHand_seq:
			 java.util.Vector vcHand_seq = reader.readMessages(fieldNumberHand_seq);
				for(int i = 0 ; i < vcHand_seq.size(); i++) {
					byte[] eachBinData = (byte[]) vcHand_seq.elementAt(i);
					st_hand_seq.Builder builderHand_seq = st_hand_seq.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolHand_seq = true;
					int nestedFieldHand_seq = -1;
					while(boolHand_seq) {
						nestedFieldHand_seq = getNextFieldNumber(innerInputReader);
						boolHand_seq = st_hand_seq.populateBuilderWithField(innerInputReader, builderHand_seq, nestedFieldHand_seq);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setHand_seq(builderHand_seq.build());
				}
				break;
			case fieldNumberComplex_seq:
			 java.util.Vector vcComplex_seq = reader.readMessages(fieldNumberComplex_seq);
				for(int i = 0 ; i < vcComplex_seq.size(); i++) {
					byte[] eachBinData = (byte[]) vcComplex_seq.elementAt(i);
					sccomplex_tile.Builder builderComplex_seq = sccomplex_tile.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolComplex_seq = true;
					int nestedFieldComplex_seq = -1;
					while(boolComplex_seq) {
						nestedFieldComplex_seq = getNextFieldNumber(innerInputReader);
						boolComplex_seq = sccomplex_tile.populateBuilderWithField(innerInputReader, builderComplex_seq, nestedFieldComplex_seq);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementComplex_seq(builderComplex_seq.build());
				}
				break;
			case fieldNumberChued_seq:
				builder.addElementChued_seq(reader.readInt(fieldNumber));
				break;
			case fieldNumberHu_desc:
			 java.util.Vector vcHu_desc = reader.readMessages(fieldNumberHu_desc);
				for(int i = 0 ; i < vcHu_desc.size(); i++) {
					byte[] eachBinData = (byte[]) vcHu_desc.elementAt(i);
					st_hu_desc.Builder builderHu_desc = st_hu_desc.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolHu_desc = true;
					int nestedFieldHu_desc = -1;
					while(boolHu_desc) {
						nestedFieldHu_desc = getNextFieldNumber(innerInputReader);
						boolHu_desc = st_hu_desc.populateBuilderWithField(innerInputReader, builderHu_desc, nestedFieldHu_desc);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementHu_desc(builderHu_desc.build());
				}
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sccontinue_seat_info.unknownTagHandler = unknownTagHandler;
	}

	public static sccontinue_seat_info parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sccontinue_seat_info parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sccontinue_seat_info parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}