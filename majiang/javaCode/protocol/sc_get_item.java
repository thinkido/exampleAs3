package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:46 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_get_item extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int gold;
	private static final int fieldNumberGold = 1;
	private final boolean hasGold;

	private final java.util.Vector items;
	private static final int fieldNumberItems = 2;

	private final long gold_cost;
	private static final int fieldNumberGold_cost = 3;
	private final boolean hasGold_cost;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_get_item(final Builder builder) {
			this.gold = builder.gold;
			this.hasGold = builder.hasGold;
			this.items = builder.items;
			this.gold_cost = builder.gold_cost;
			this.hasGold_cost = builder.hasGold_cost;
			}

	public static class Builder {
		private int gold;
		private boolean hasGold = false;

		private java.util.Vector items = new java.util.Vector();
		private boolean hasItems = false;

		private long gold_cost;
		private boolean hasGold_cost = false;


		private Builder() {
		}

		public Builder setGold(final int gold) {
			this.gold = gold;
			this.hasGold = true;
			return this;
		}

		public Builder setItems(final java.util.Vector items) {
			if(!hasItems) {
				hasItems = true;
			}
			this.items = items;
			return this;
		}


		public Builder addElementItems(final t_myitem element) {
			if(!hasItems) {
				hasItems = true;
			}
			items.addElement(element);
			return this;
		}

		public Builder setGold_cost(final long gold_cost) {
			this.gold_cost = gold_cost;
			this.hasGold_cost = true;
			return this;
		}

		public sc_get_item build() {
			return new sc_get_item(this);
		}
	}

	public int getGold() {
		return gold;
	}

	public boolean hasGold() {
		return hasGold;
	}

	public java.util.Vector getItems() {
		return items;
	}

	public long getGold_cost() {
		return gold_cost;
	}

	public boolean hasGold_cost() {
		return hasGold_cost;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasGold) retValue += "gold = " + this.gold + TAB;
		retValue += "items = " + this.items + TAB;
		if(hasGold_cost) retValue += "gold_cost = " + this.gold_cost + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasGold) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberGold, gold);
		if(hasGold_cost) totalSize += ComputeSizeUtil.computeLongSize(fieldNumberGold_cost, gold_cost);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberItems, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, items);

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasGold) writer.writeInt(fieldNumberGold, gold);
		writer.writeList(fieldNumberItems, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, items);
		if(hasGold_cost) writer.writeLong(fieldNumberGold_cost, gold_cost);
	}

	static sc_get_item parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_get_item.Builder builder = sc_get_item.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberGold:
				builder.setGold(reader.readInt(fieldNumber));
				break;
			case fieldNumberItems:
			 java.util.Vector vcItems = reader.readMessages(fieldNumberItems);
				for(int i = 0 ; i < vcItems.size(); i++) {
					byte[] eachBinData = (byte[]) vcItems.elementAt(i);
					t_myitem.Builder builderItems = t_myitem.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolItems = true;
					int nestedFieldItems = -1;
					while(boolItems) {
						nestedFieldItems = getNextFieldNumber(innerInputReader);
						boolItems = t_myitem.populateBuilderWithField(innerInputReader, builderItems, nestedFieldItems);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementItems(builderItems.build());
				}
				break;
			case fieldNumberGold_cost:
				builder.setGold_cost(reader.readLong(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_get_item.unknownTagHandler = unknownTagHandler;
	}

	public static sc_get_item parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_get_item parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_get_item parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}