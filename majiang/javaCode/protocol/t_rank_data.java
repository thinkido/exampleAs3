package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:46 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class t_rank_data extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int oid;
	private static final int fieldNumberOid = 1;
	private final boolean hasOid;

	private final String id;
	private static final int fieldNumberId = 2;
	private final boolean hasId;

	private final String idtype;
	private static final int fieldNumberIdtype = 3;
	private final boolean hasIdtype;

	private final String name;
	private static final int fieldNumberName = 4;
	private final boolean hasName;

	private final int rank;
	private static final int fieldNumberRank = 5;
	private final boolean hasRank;

	private final int value_int_1;
	private static final int fieldNumberValue_int_1 = 6;
	private final boolean hasValue_int_1;

	private final int value_int_2;
	private static final int fieldNumberValue_int_2 = 7;
	private final boolean hasValue_int_2;

	private final String value_str;
	private static final int fieldNumberValue_str = 8;
	private final boolean hasValue_str;

	private final int trend;
	private static final int fieldNumberTrend = 9;
	private final boolean hasTrend;

	private final int vip;
	private static final int fieldNumberVip = 10;
	private final boolean hasVip;

	private final int portrait;
	private static final int fieldNumberPortrait = 11;
	private final boolean hasPortrait;


	public static Builder newBuilder() {
		return new Builder();
	}

	private t_rank_data(final Builder builder) {
			this.oid = builder.oid;
			this.hasOid = builder.hasOid;
			this.id = builder.id;
			this.hasId = builder.hasId;
			this.idtype = builder.idtype;
			this.hasIdtype = builder.hasIdtype;
			this.name = builder.name;
			this.hasName = builder.hasName;
			this.rank = builder.rank;
			this.hasRank = builder.hasRank;
			this.value_int_1 = builder.value_int_1;
			this.hasValue_int_1 = builder.hasValue_int_1;
			this.value_int_2 = builder.value_int_2;
			this.hasValue_int_2 = builder.hasValue_int_2;
			this.value_str = builder.value_str;
			this.hasValue_str = builder.hasValue_str;
			this.trend = builder.trend;
			this.hasTrend = builder.hasTrend;
			this.vip = builder.vip;
			this.hasVip = builder.hasVip;
			this.portrait = builder.portrait;
			this.hasPortrait = builder.hasPortrait;
			}

	public static class Builder {
		private int oid;
		private boolean hasOid = false;

		private String id;
		private boolean hasId = false;

		private String idtype;
		private boolean hasIdtype = false;

		private String name;
		private boolean hasName = false;

		private int rank;
		private boolean hasRank = false;

		private int value_int_1;
		private boolean hasValue_int_1 = false;

		private int value_int_2;
		private boolean hasValue_int_2 = false;

		private String value_str;
		private boolean hasValue_str = false;

		private int trend;
		private boolean hasTrend = false;

		private int vip;
		private boolean hasVip = false;

		private int portrait;
		private boolean hasPortrait = false;


		private Builder() {
		}

		public Builder setOid(final int oid) {
			this.oid = oid;
			this.hasOid = true;
			return this;
		}

		public Builder setId(final String id) {
			this.id = id;
			this.hasId = true;
			return this;
		}

		public Builder setIdtype(final String idtype) {
			this.idtype = idtype;
			this.hasIdtype = true;
			return this;
		}

		public Builder setName(final String name) {
			this.name = name;
			this.hasName = true;
			return this;
		}

		public Builder setRank(final int rank) {
			this.rank = rank;
			this.hasRank = true;
			return this;
		}

		public Builder setValue_int_1(final int value_int_1) {
			this.value_int_1 = value_int_1;
			this.hasValue_int_1 = true;
			return this;
		}

		public Builder setValue_int_2(final int value_int_2) {
			this.value_int_2 = value_int_2;
			this.hasValue_int_2 = true;
			return this;
		}

		public Builder setValue_str(final String value_str) {
			this.value_str = value_str;
			this.hasValue_str = true;
			return this;
		}

		public Builder setTrend(final int trend) {
			this.trend = trend;
			this.hasTrend = true;
			return this;
		}

		public Builder setVip(final int vip) {
			this.vip = vip;
			this.hasVip = true;
			return this;
		}

		public Builder setPortrait(final int portrait) {
			this.portrait = portrait;
			this.hasPortrait = true;
			return this;
		}

		public t_rank_data build() {
			return new t_rank_data(this);
		}
	}

	public int getOid() {
		return oid;
	}

	public boolean hasOid() {
		return hasOid;
	}

	public String getId() {
		return id;
	}

	public boolean hasId() {
		return hasId;
	}

	public String getIdtype() {
		return idtype;
	}

	public boolean hasIdtype() {
		return hasIdtype;
	}

	public String getName() {
		return name;
	}

	public boolean hasName() {
		return hasName;
	}

	public int getRank() {
		return rank;
	}

	public boolean hasRank() {
		return hasRank;
	}

	public int getValue_int_1() {
		return value_int_1;
	}

	public boolean hasValue_int_1() {
		return hasValue_int_1;
	}

	public int getValue_int_2() {
		return value_int_2;
	}

	public boolean hasValue_int_2() {
		return hasValue_int_2;
	}

	public String getValue_str() {
		return value_str;
	}

	public boolean hasValue_str() {
		return hasValue_str;
	}

	public int getTrend() {
		return trend;
	}

	public boolean hasTrend() {
		return hasTrend;
	}

	public int getVip() {
		return vip;
	}

	public boolean hasVip() {
		return hasVip;
	}

	public int getPortrait() {
		return portrait;
	}

	public boolean hasPortrait() {
		return hasPortrait;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasOid) retValue += "oid = " + this.oid + TAB;
		if(hasId) retValue += "id = " + this.id + TAB;
		if(hasIdtype) retValue += "idtype = " + this.idtype + TAB;
		if(hasName) retValue += "name = " + this.name + TAB;
		if(hasRank) retValue += "rank = " + this.rank + TAB;
		if(hasValue_int_1) retValue += "value_int_1 = " + this.value_int_1 + TAB;
		if(hasValue_int_2) retValue += "value_int_2 = " + this.value_int_2 + TAB;
		if(hasValue_str) retValue += "value_str = " + this.value_str + TAB;
		if(hasTrend) retValue += "trend = " + this.trend + TAB;
		if(hasVip) retValue += "vip = " + this.vip + TAB;
		if(hasPortrait) retValue += "portrait = " + this.portrait + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasOid) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberOid, oid);
		if(hasId) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberId, id);
		if(hasIdtype) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberIdtype, idtype);
		if(hasName) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberName, name);
		if(hasRank) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberRank, rank);
		if(hasValue_int_1) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberValue_int_1, value_int_1);
		if(hasValue_int_2) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberValue_int_2, value_int_2);
		if(hasValue_str) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberValue_str, value_str);
		if(hasTrend) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTrend, trend);
		if(hasVip) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberVip, vip);
		if(hasPortrait) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberPortrait, portrait);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasOid) writer.writeInt(fieldNumberOid, oid);
		if(hasId) writer.writeString(fieldNumberId, id);
		if(hasIdtype) writer.writeString(fieldNumberIdtype, idtype);
		if(hasName) writer.writeString(fieldNumberName, name);
		if(hasRank) writer.writeInt(fieldNumberRank, rank);
		if(hasValue_int_1) writer.writeInt(fieldNumberValue_int_1, value_int_1);
		if(hasValue_int_2) writer.writeInt(fieldNumberValue_int_2, value_int_2);
		if(hasValue_str) writer.writeString(fieldNumberValue_str, value_str);
		if(hasTrend) writer.writeInt(fieldNumberTrend, trend);
		if(hasVip) writer.writeInt(fieldNumberVip, vip);
		if(hasPortrait) writer.writeInt(fieldNumberPortrait, portrait);
	}

	static t_rank_data parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final t_rank_data.Builder builder = t_rank_data.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberOid:
				builder.setOid(reader.readInt(fieldNumber));
				break;
			case fieldNumberId:
				builder.setId(reader.readString(fieldNumber));
				break;
			case fieldNumberIdtype:
				builder.setIdtype(reader.readString(fieldNumber));
				break;
			case fieldNumberName:
				builder.setName(reader.readString(fieldNumber));
				break;
			case fieldNumberRank:
				builder.setRank(reader.readInt(fieldNumber));
				break;
			case fieldNumberValue_int_1:
				builder.setValue_int_1(reader.readInt(fieldNumber));
				break;
			case fieldNumberValue_int_2:
				builder.setValue_int_2(reader.readInt(fieldNumber));
				break;
			case fieldNumberValue_str:
				builder.setValue_str(reader.readString(fieldNumber));
				break;
			case fieldNumberTrend:
				builder.setTrend(reader.readInt(fieldNumber));
				break;
			case fieldNumberVip:
				builder.setVip(reader.readInt(fieldNumber));
				break;
			case fieldNumberPortrait:
				builder.setPortrait(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		t_rank_data.unknownTagHandler = unknownTagHandler;
	}

	public static t_rank_data parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static t_rank_data parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static t_rank_data parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}