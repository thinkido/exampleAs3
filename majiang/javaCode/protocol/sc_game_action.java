package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:47 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_game_action extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int id;
	private static final int fieldNumberId = 1;
	private final boolean hasId;

	private final int sub_id;
	private static final int fieldNumberSub_id = 2;
	private final boolean hasSub_id;

	private final java.util.Vector money_transfer;
	private static final int fieldNumberMoney_transfer = 3;

	private final int tile_type_or_id;
	private static final int fieldNumberTile_type_or_id = 4;
	private final boolean hasTile_type_or_id;

	private final int act_seat_index;
	private static final int fieldNumberAct_seat_index = 5;
	private final boolean hasAct_seat_index;

	private final st_hand_seq act_hand_seq;
	private static final int fieldNumberAct_hand_seq = 6;
	private final boolean hasAct_hand_seq;

	private final java.util.Vector act_hu_seq;
	private static final int fieldNumberAct_hu_seq = 7;

	private final java.util.Vector act_complex_seq;
	private static final int fieldNumberAct_complex_seq = 8;

	private final java.util.Vector act_chued_seq;
	private static final int fieldNumberAct_chued_seq = 9;

	private final int acted_seat_index;
	private static final int fieldNumberActed_seat_index = 10;
	private final boolean hasActed_seat_index;

	private final java.util.Vector show_actions;
	private static final int fieldNumberShow_actions = 11;

	private final int tiles_remain;
	private static final int fieldNumberTiles_remain = 12;
	private final boolean hasTiles_remain;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_game_action(final Builder builder) {
			this.id = builder.id;
			this.hasId = builder.hasId;
			this.sub_id = builder.sub_id;
			this.hasSub_id = builder.hasSub_id;
			this.money_transfer = builder.money_transfer;
			this.tile_type_or_id = builder.tile_type_or_id;
			this.hasTile_type_or_id = builder.hasTile_type_or_id;
			this.act_seat_index = builder.act_seat_index;
			this.hasAct_seat_index = builder.hasAct_seat_index;
			this.act_hand_seq = builder.act_hand_seq;
			this.hasAct_hand_seq = builder.hasAct_hand_seq;
			this.act_hu_seq = builder.act_hu_seq;
			this.act_complex_seq = builder.act_complex_seq;
			this.act_chued_seq = builder.act_chued_seq;
			this.acted_seat_index = builder.acted_seat_index;
			this.hasActed_seat_index = builder.hasActed_seat_index;
			this.show_actions = builder.show_actions;
			this.tiles_remain = builder.tiles_remain;
			this.hasTiles_remain = builder.hasTiles_remain;
			}

	public static class Builder {
		private int id;
		private boolean hasId = false;

		private int sub_id;
		private boolean hasSub_id = false;

		private java.util.Vector money_transfer = new java.util.Vector();
		private boolean hasMoney_transfer = false;

		private int tile_type_or_id;
		private boolean hasTile_type_or_id = false;

		private int act_seat_index;
		private boolean hasAct_seat_index = false;

		private st_hand_seq act_hand_seq;
		private boolean hasAct_hand_seq = false;

		private java.util.Vector act_hu_seq = new java.util.Vector();
		private boolean hasAct_hu_seq = false;

		private java.util.Vector act_complex_seq = new java.util.Vector();
		private boolean hasAct_complex_seq = false;

		private java.util.Vector act_chued_seq = new java.util.Vector();
		private boolean hasAct_chued_seq = false;

		private int acted_seat_index;
		private boolean hasActed_seat_index = false;

		private java.util.Vector show_actions = new java.util.Vector();
		private boolean hasShow_actions = false;

		private int tiles_remain;
		private boolean hasTiles_remain = false;


		private Builder() {
		}

		public Builder setId(final int id) {
			this.id = id;
			this.hasId = true;
			return this;
		}

		public Builder setSub_id(final int sub_id) {
			this.sub_id = sub_id;
			this.hasSub_id = true;
			return this;
		}

		public Builder setMoney_transfer(final java.util.Vector money_transfer) {
			if(!hasMoney_transfer) {
				hasMoney_transfer = true;
			}
			this.money_transfer = money_transfer;
			return this;
		}


		public Builder addElementMoney_transfer(final st_money_transfer element) {
			if(!hasMoney_transfer) {
				hasMoney_transfer = true;
			}
			money_transfer.addElement(element);
			return this;
		}

		public Builder setTile_type_or_id(final int tile_type_or_id) {
			this.tile_type_or_id = tile_type_or_id;
			this.hasTile_type_or_id = true;
			return this;
		}

		public Builder setAct_seat_index(final int act_seat_index) {
			this.act_seat_index = act_seat_index;
			this.hasAct_seat_index = true;
			return this;
		}

		public Builder setAct_hand_seq(final st_hand_seq act_hand_seq) {
			this.act_hand_seq = act_hand_seq;
			this.hasAct_hand_seq = true;
			return this;
		}

		public Builder setAct_hu_seq(final java.util.Vector act_hu_seq) {
			if(!hasAct_hu_seq) {
				hasAct_hu_seq = true;
			}
			this.act_hu_seq = act_hu_seq;
			return this;
		}


		public Builder addElementAct_hu_seq(final int element) {
			if(!hasAct_hu_seq) {
				hasAct_hu_seq = true;
			}
			act_hu_seq.addElement(new Integer(element));
			return this;
		}

		public Builder setAct_complex_seq(final java.util.Vector act_complex_seq) {
			if(!hasAct_complex_seq) {
				hasAct_complex_seq = true;
			}
			this.act_complex_seq = act_complex_seq;
			return this;
		}


		public Builder addElementAct_complex_seq(final sccomplex_tile element) {
			if(!hasAct_complex_seq) {
				hasAct_complex_seq = true;
			}
			act_complex_seq.addElement(element);
			return this;
		}

		public Builder setAct_chued_seq(final java.util.Vector act_chued_seq) {
			if(!hasAct_chued_seq) {
				hasAct_chued_seq = true;
			}
			this.act_chued_seq = act_chued_seq;
			return this;
		}


		public Builder addElementAct_chued_seq(final int element) {
			if(!hasAct_chued_seq) {
				hasAct_chued_seq = true;
			}
			act_chued_seq.addElement(new Integer(element));
			return this;
		}

		public Builder setActed_seat_index(final int acted_seat_index) {
			this.acted_seat_index = acted_seat_index;
			this.hasActed_seat_index = true;
			return this;
		}

		public Builder setShow_actions(final java.util.Vector show_actions) {
			if(!hasShow_actions) {
				hasShow_actions = true;
			}
			this.show_actions = show_actions;
			return this;
		}


		public Builder addElementShow_actions(final scgame_show_actions element) {
			if(!hasShow_actions) {
				hasShow_actions = true;
			}
			show_actions.addElement(element);
			return this;
		}

		public Builder setTiles_remain(final int tiles_remain) {
			this.tiles_remain = tiles_remain;
			this.hasTiles_remain = true;
			return this;
		}

		public sc_game_action build() {
			return new sc_game_action(this);
		}
	}

	public int getId() {
		return id;
	}

	public boolean hasId() {
		return hasId;
	}

	public int getSub_id() {
		return sub_id;
	}

	public boolean hasSub_id() {
		return hasSub_id;
	}

	public java.util.Vector getMoney_transfer() {
		return money_transfer;
	}

	public int getTile_type_or_id() {
		return tile_type_or_id;
	}

	public boolean hasTile_type_or_id() {
		return hasTile_type_or_id;
	}

	public int getAct_seat_index() {
		return act_seat_index;
	}

	public boolean hasAct_seat_index() {
		return hasAct_seat_index;
	}

	public st_hand_seq getAct_hand_seq() {
		return act_hand_seq;
	}

	public boolean hasAct_hand_seq() {
		return hasAct_hand_seq;
	}

	public java.util.Vector getAct_hu_seq() {
		return act_hu_seq;
	}

	public java.util.Vector getAct_complex_seq() {
		return act_complex_seq;
	}

	public java.util.Vector getAct_chued_seq() {
		return act_chued_seq;
	}

	public int getActed_seat_index() {
		return acted_seat_index;
	}

	public boolean hasActed_seat_index() {
		return hasActed_seat_index;
	}

	public java.util.Vector getShow_actions() {
		return show_actions;
	}

	public int getTiles_remain() {
		return tiles_remain;
	}

	public boolean hasTiles_remain() {
		return hasTiles_remain;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasId) retValue += "id = " + this.id + TAB;
		if(hasSub_id) retValue += "sub_id = " + this.sub_id + TAB;
		retValue += "money_transfer = " + this.money_transfer + TAB;
		if(hasTile_type_or_id) retValue += "tile_type_or_id = " + this.tile_type_or_id + TAB;
		if(hasAct_seat_index) retValue += "act_seat_index = " + this.act_seat_index + TAB;
		if(hasAct_hand_seq) retValue += "act_hand_seq = " + this.act_hand_seq + TAB;
		retValue += "act_hu_seq = " + this.act_hu_seq + TAB;
		retValue += "act_complex_seq = " + this.act_complex_seq + TAB;
		retValue += "act_chued_seq = " + this.act_chued_seq + TAB;
		if(hasActed_seat_index) retValue += "acted_seat_index = " + this.acted_seat_index + TAB;
		retValue += "show_actions = " + this.show_actions + TAB;
		if(hasTiles_remain) retValue += "tiles_remain = " + this.tiles_remain + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasId) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberId, id);
		if(hasSub_id) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSub_id, sub_id);
		if(hasTile_type_or_id) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTile_type_or_id, tile_type_or_id);
		if(hasAct_seat_index) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberAct_seat_index, act_seat_index);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberAct_hu_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, act_hu_seq);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberAct_chued_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, act_chued_seq);
		if(hasActed_seat_index) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberActed_seat_index, acted_seat_index);
		if(hasTiles_remain) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTiles_remain, tiles_remain);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberMoney_transfer, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, money_transfer);
		if(hasAct_hand_seq) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberAct_hand_seq, act_hand_seq.computeSize());
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberAct_complex_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, act_complex_seq);
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberShow_actions, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, show_actions);

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasId) writer.writeInt(fieldNumberId, id);
		if(hasSub_id) writer.writeInt(fieldNumberSub_id, sub_id);
		writer.writeList(fieldNumberMoney_transfer, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, money_transfer);
		if(hasTile_type_or_id) writer.writeInt(fieldNumberTile_type_or_id, tile_type_or_id);
		if(hasAct_seat_index) writer.writeInt(fieldNumberAct_seat_index, act_seat_index);
		if(hasAct_hand_seq) { writer.writeMessage(fieldNumberAct_hand_seq, act_hand_seq.computeSize()); act_hand_seq.writeFields(writer); }
		writer.writeList(fieldNumberAct_hu_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, act_hu_seq);
		writer.writeList(fieldNumberAct_complex_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, act_complex_seq);
		writer.writeList(fieldNumberAct_chued_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, act_chued_seq);
		if(hasActed_seat_index) writer.writeInt(fieldNumberActed_seat_index, acted_seat_index);
		writer.writeList(fieldNumberShow_actions, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, show_actions);
		if(hasTiles_remain) writer.writeInt(fieldNumberTiles_remain, tiles_remain);
	}

	static sc_game_action parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_game_action.Builder builder = sc_game_action.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberId:
				builder.setId(reader.readInt(fieldNumber));
				break;
			case fieldNumberSub_id:
				builder.setSub_id(reader.readInt(fieldNumber));
				break;
			case fieldNumberMoney_transfer:
			 java.util.Vector vcMoney_transfer = reader.readMessages(fieldNumberMoney_transfer);
				for(int i = 0 ; i < vcMoney_transfer.size(); i++) {
					byte[] eachBinData = (byte[]) vcMoney_transfer.elementAt(i);
					st_money_transfer.Builder builderMoney_transfer = st_money_transfer.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolMoney_transfer = true;
					int nestedFieldMoney_transfer = -1;
					while(boolMoney_transfer) {
						nestedFieldMoney_transfer = getNextFieldNumber(innerInputReader);
						boolMoney_transfer = st_money_transfer.populateBuilderWithField(innerInputReader, builderMoney_transfer, nestedFieldMoney_transfer);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementMoney_transfer(builderMoney_transfer.build());
				}
				break;
			case fieldNumberTile_type_or_id:
				builder.setTile_type_or_id(reader.readInt(fieldNumber));
				break;
			case fieldNumberAct_seat_index:
				builder.setAct_seat_index(reader.readInt(fieldNumber));
				break;
			case fieldNumberAct_hand_seq:
			 java.util.Vector vcAct_hand_seq = reader.readMessages(fieldNumberAct_hand_seq);
				for(int i = 0 ; i < vcAct_hand_seq.size(); i++) {
					byte[] eachBinData = (byte[]) vcAct_hand_seq.elementAt(i);
					st_hand_seq.Builder builderAct_hand_seq = st_hand_seq.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolAct_hand_seq = true;
					int nestedFieldAct_hand_seq = -1;
					while(boolAct_hand_seq) {
						nestedFieldAct_hand_seq = getNextFieldNumber(innerInputReader);
						boolAct_hand_seq = st_hand_seq.populateBuilderWithField(innerInputReader, builderAct_hand_seq, nestedFieldAct_hand_seq);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setAct_hand_seq(builderAct_hand_seq.build());
				}
				break;
			case fieldNumberAct_hu_seq:
				builder.addElementAct_hu_seq(reader.readInt(fieldNumber));
				break;
			case fieldNumberAct_complex_seq:
			 java.util.Vector vcAct_complex_seq = reader.readMessages(fieldNumberAct_complex_seq);
				for(int i = 0 ; i < vcAct_complex_seq.size(); i++) {
					byte[] eachBinData = (byte[]) vcAct_complex_seq.elementAt(i);
					sccomplex_tile.Builder builderAct_complex_seq = sccomplex_tile.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolAct_complex_seq = true;
					int nestedFieldAct_complex_seq = -1;
					while(boolAct_complex_seq) {
						nestedFieldAct_complex_seq = getNextFieldNumber(innerInputReader);
						boolAct_complex_seq = sccomplex_tile.populateBuilderWithField(innerInputReader, builderAct_complex_seq, nestedFieldAct_complex_seq);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementAct_complex_seq(builderAct_complex_seq.build());
				}
				break;
			case fieldNumberAct_chued_seq:
				builder.addElementAct_chued_seq(reader.readInt(fieldNumber));
				break;
			case fieldNumberActed_seat_index:
				builder.setActed_seat_index(reader.readInt(fieldNumber));
				break;
			case fieldNumberShow_actions:
			 java.util.Vector vcShow_actions = reader.readMessages(fieldNumberShow_actions);
				for(int i = 0 ; i < vcShow_actions.size(); i++) {
					byte[] eachBinData = (byte[]) vcShow_actions.elementAt(i);
					scgame_show_actions.Builder builderShow_actions = scgame_show_actions.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolShow_actions = true;
					int nestedFieldShow_actions = -1;
					while(boolShow_actions) {
						nestedFieldShow_actions = getNextFieldNumber(innerInputReader);
						boolShow_actions = scgame_show_actions.populateBuilderWithField(innerInputReader, builderShow_actions, nestedFieldShow_actions);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementShow_actions(builderShow_actions.build());
				}
				break;
			case fieldNumberTiles_remain:
				builder.setTiles_remain(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_game_action.unknownTagHandler = unknownTagHandler;
	}

	public static sc_game_action parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_game_action parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_game_action parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}