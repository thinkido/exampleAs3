package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:47 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class scenter_seat_info extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final stplayer_info player_info;
	private static final int fieldNumberPlayer_info = 1;
	private final boolean hasPlayer_info;

	private final boolean ready;
	private static final int fieldNumberReady = 2;
	private final boolean hasReady;

	private final int seat_index;
	private static final int fieldNumberSeat_index = 3;
	private final boolean hasSeat_index;


	public static Builder newBuilder() {
		return new Builder();
	}

	private scenter_seat_info(final Builder builder) {
			this.player_info = builder.player_info;
			this.hasPlayer_info = builder.hasPlayer_info;
			this.ready = builder.ready;
			this.hasReady = builder.hasReady;
			this.seat_index = builder.seat_index;
			this.hasSeat_index = builder.hasSeat_index;
			}

	public static class Builder {
		private stplayer_info player_info;
		private boolean hasPlayer_info = false;

		private boolean ready;
		private boolean hasReady = false;

		private int seat_index;
		private boolean hasSeat_index = false;


		private Builder() {
		}

		public Builder setPlayer_info(final stplayer_info player_info) {
			this.player_info = player_info;
			this.hasPlayer_info = true;
			return this;
		}

		public Builder setReady(final boolean ready) {
			this.ready = ready;
			this.hasReady = true;
			return this;
		}

		public Builder setSeat_index(final int seat_index) {
			this.seat_index = seat_index;
			this.hasSeat_index = true;
			return this;
		}

		public scenter_seat_info build() {
			return new scenter_seat_info(this);
		}
	}

	public stplayer_info getPlayer_info() {
		return player_info;
	}

	public boolean hasPlayer_info() {
		return hasPlayer_info;
	}

	public boolean getReady() {
		return ready;
	}

	public boolean hasReady() {
		return hasReady;
	}

	public int getSeat_index() {
		return seat_index;
	}

	public boolean hasSeat_index() {
		return hasSeat_index;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasPlayer_info) retValue += "player_info = " + this.player_info + TAB;
		if(hasReady) retValue += "ready = " + this.ready + TAB;
		if(hasSeat_index) retValue += "seat_index = " + this.seat_index + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasReady) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberReady, ready);
		if(hasSeat_index) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSeat_index, seat_index);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasPlayer_info) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberPlayer_info, player_info.computeSize());

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasPlayer_info) { writer.writeMessage(fieldNumberPlayer_info, player_info.computeSize()); player_info.writeFields(writer); }
		if(hasReady) writer.writeBoolean(fieldNumberReady, ready);
		if(hasSeat_index) writer.writeInt(fieldNumberSeat_index, seat_index);
	}

	static scenter_seat_info parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final scenter_seat_info.Builder builder = scenter_seat_info.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberPlayer_info:
			 java.util.Vector vcPlayer_info = reader.readMessages(fieldNumberPlayer_info);
				for(int i = 0 ; i < vcPlayer_info.size(); i++) {
					byte[] eachBinData = (byte[]) vcPlayer_info.elementAt(i);
					stplayer_info.Builder builderPlayer_info = stplayer_info.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolPlayer_info = true;
					int nestedFieldPlayer_info = -1;
					while(boolPlayer_info) {
						nestedFieldPlayer_info = getNextFieldNumber(innerInputReader);
						boolPlayer_info = stplayer_info.populateBuilderWithField(innerInputReader, builderPlayer_info, nestedFieldPlayer_info);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setPlayer_info(builderPlayer_info.build());
				}
				break;
			case fieldNumberReady:
				builder.setReady(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberSeat_index:
				builder.setSeat_index(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		scenter_seat_info.unknownTagHandler = unknownTagHandler;
	}

	public static scenter_seat_info parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static scenter_seat_info parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static scenter_seat_info parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}