package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:16 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class t_myitem extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int id;
	private static final int fieldNumberId = 1;
	private final boolean hasId;

	private final int shopid;
	private static final int fieldNumberShopid = 2;
	private final boolean hasShopid;

	private final int count;
	private static final int fieldNumberCount = 3;
	private final boolean hasCount;

	private final int status;
	private static final int fieldNumberStatus = 4;
	private final boolean hasStatus;

	private final t_duration duration;
	private static final int fieldNumberDuration = 5;
	private final boolean hasDuration;


	public static Builder newBuilder() {
		return new Builder();
	}

	private t_myitem(final Builder builder) {
			this.id = builder.id;
			this.hasId = builder.hasId;
			this.shopid = builder.shopid;
			this.hasShopid = builder.hasShopid;
			this.count = builder.count;
			this.hasCount = builder.hasCount;
			this.status = builder.status;
			this.hasStatus = builder.hasStatus;
			this.duration = builder.duration;
			this.hasDuration = builder.hasDuration;
			}

	public static class Builder {
		private int id;
		private boolean hasId = false;

		private int shopid;
		private boolean hasShopid = false;

		private int count;
		private boolean hasCount = false;

		private int status;
		private boolean hasStatus = false;

		private t_duration duration;
		private boolean hasDuration = false;


		private Builder() {
		}

		public Builder setId(final int id) {
			this.id = id;
			this.hasId = true;
			return this;
		}

		public Builder setShopid(final int shopid) {
			this.shopid = shopid;
			this.hasShopid = true;
			return this;
		}

		public Builder setCount(final int count) {
			this.count = count;
			this.hasCount = true;
			return this;
		}

		public Builder setStatus(final int status) {
			this.status = status;
			this.hasStatus = true;
			return this;
		}

		public Builder setDuration(final t_duration duration) {
			this.duration = duration;
			this.hasDuration = true;
			return this;
		}

		public t_myitem build() {
			return new t_myitem(this);
		}
	}

	public int getId() {
		return id;
	}

	public boolean hasId() {
		return hasId;
	}

	public int getShopid() {
		return shopid;
	}

	public boolean hasShopid() {
		return hasShopid;
	}

	public int getCount() {
		return count;
	}

	public boolean hasCount() {
		return hasCount;
	}

	public int getStatus() {
		return status;
	}

	public boolean hasStatus() {
		return hasStatus;
	}

	public t_duration getDuration() {
		return duration;
	}

	public boolean hasDuration() {
		return hasDuration;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasId) retValue += "id = " + this.id + TAB;
		if(hasShopid) retValue += "shopid = " + this.shopid + TAB;
		if(hasCount) retValue += "count = " + this.count + TAB;
		if(hasStatus) retValue += "status = " + this.status + TAB;
		if(hasDuration) retValue += "duration = " + this.duration + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasId) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberId, id);
		if(hasShopid) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberShopid, shopid);
		if(hasCount) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberCount, count);
		if(hasStatus) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberStatus, status);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasDuration) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberDuration, duration.computeSize());

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasId) writer.writeInt(fieldNumberId, id);
		if(hasShopid) writer.writeInt(fieldNumberShopid, shopid);
		if(hasCount) writer.writeInt(fieldNumberCount, count);
		if(hasStatus) writer.writeInt(fieldNumberStatus, status);
		if(hasDuration) { writer.writeMessage(fieldNumberDuration, duration.computeSize()); duration.writeFields(writer); }
	}

	static t_myitem parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final t_myitem.Builder builder = t_myitem.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberId:
				builder.setId(reader.readInt(fieldNumber));
				break;
			case fieldNumberShopid:
				builder.setShopid(reader.readInt(fieldNumber));
				break;
			case fieldNumberCount:
				builder.setCount(reader.readInt(fieldNumber));
				break;
			case fieldNumberStatus:
				builder.setStatus(reader.readInt(fieldNumber));
				break;
			case fieldNumberDuration:
			 java.util.Vector vcDuration = reader.readMessages(fieldNumberDuration);
				for(int i = 0 ; i < vcDuration.size(); i++) {
					byte[] eachBinData = (byte[]) vcDuration.elementAt(i);
					t_duration.Builder builderDuration = t_duration.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolDuration = true;
					int nestedFieldDuration = -1;
					while(boolDuration) {
						nestedFieldDuration = getNextFieldNumber(innerInputReader);
						boolDuration = t_duration.populateBuilderWithField(innerInputReader, builderDuration, nestedFieldDuration);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setDuration(builderDuration.build());
				}
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		t_myitem.unknownTagHandler = unknownTagHandler;
	}

	public static t_myitem parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static t_myitem parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static t_myitem parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}