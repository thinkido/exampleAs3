package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:47 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_minigame_egg_open extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int egg_index;
	private static final int fieldNumberEgg_index = 1;
	private final boolean hasEgg_index;

	private final t_award_item award;
	private static final int fieldNumberAward = 2;
	private final boolean hasAward;

	private final int remain_times;
	private static final int fieldNumberRemain_times = 3;
	private final boolean hasRemain_times;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_minigame_egg_open(final Builder builder) {
			this.egg_index = builder.egg_index;
			this.hasEgg_index = builder.hasEgg_index;
			this.award = builder.award;
			this.hasAward = builder.hasAward;
			this.remain_times = builder.remain_times;
			this.hasRemain_times = builder.hasRemain_times;
			}

	public static class Builder {
		private int egg_index;
		private boolean hasEgg_index = false;

		private t_award_item award;
		private boolean hasAward = false;

		private int remain_times;
		private boolean hasRemain_times = false;


		private Builder() {
		}

		public Builder setEgg_index(final int egg_index) {
			this.egg_index = egg_index;
			this.hasEgg_index = true;
			return this;
		}

		public Builder setAward(final t_award_item award) {
			this.award = award;
			this.hasAward = true;
			return this;
		}

		public Builder setRemain_times(final int remain_times) {
			this.remain_times = remain_times;
			this.hasRemain_times = true;
			return this;
		}

		public sc_minigame_egg_open build() {
			return new sc_minigame_egg_open(this);
		}
	}

	public int getEgg_index() {
		return egg_index;
	}

	public boolean hasEgg_index() {
		return hasEgg_index;
	}

	public t_award_item getAward() {
		return award;
	}

	public boolean hasAward() {
		return hasAward;
	}

	public int getRemain_times() {
		return remain_times;
	}

	public boolean hasRemain_times() {
		return hasRemain_times;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasEgg_index) retValue += "egg_index = " + this.egg_index + TAB;
		if(hasAward) retValue += "award = " + this.award + TAB;
		if(hasRemain_times) retValue += "remain_times = " + this.remain_times + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasEgg_index) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberEgg_index, egg_index);
		if(hasRemain_times) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberRemain_times, remain_times);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasAward) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberAward, award.computeSize());

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasEgg_index) writer.writeInt(fieldNumberEgg_index, egg_index);
		if(hasAward) { writer.writeMessage(fieldNumberAward, award.computeSize()); award.writeFields(writer); }
		if(hasRemain_times) writer.writeInt(fieldNumberRemain_times, remain_times);
	}

	static sc_minigame_egg_open parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_minigame_egg_open.Builder builder = sc_minigame_egg_open.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberEgg_index:
				builder.setEgg_index(reader.readInt(fieldNumber));
				break;
			case fieldNumberAward:
			 java.util.Vector vcAward = reader.readMessages(fieldNumberAward);
				for(int i = 0 ; i < vcAward.size(); i++) {
					byte[] eachBinData = (byte[]) vcAward.elementAt(i);
					t_award_item.Builder builderAward = t_award_item.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolAward = true;
					int nestedFieldAward = -1;
					while(boolAward) {
						nestedFieldAward = getNextFieldNumber(innerInputReader);
						boolAward = t_award_item.populateBuilderWithField(innerInputReader, builderAward, nestedFieldAward);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setAward(builderAward.build());
				}
				break;
			case fieldNumberRemain_times:
				builder.setRemain_times(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_minigame_egg_open.unknownTagHandler = unknownTagHandler;
	}

	public static sc_minigame_egg_open parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_minigame_egg_open parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_minigame_egg_open parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}