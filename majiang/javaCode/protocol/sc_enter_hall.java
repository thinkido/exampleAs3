package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:46 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_enter_hall extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final java.util.Vector place_infos;
	private static final int fieldNumberPlace_infos = 1;

	private final String name;
	private static final int fieldNumberName = 3;
	private final boolean hasName;

	private final long gold;
	private static final int fieldNumberGold = 4;
	private final boolean hasGold;

	private final long exp;
	private static final int fieldNumberExp = 5;
	private final boolean hasExp;

	private final int level;
	private static final int fieldNumberLevel = 6;
	private final boolean hasLevel;

	private final int sex;
	private static final int fieldNumberSex = 7;
	private final boolean hasSex;

	private final int vip;
	private static final int fieldNumberVip = 8;
	private final boolean hasVip;

	private final int quest_can_fetch;
	private static final int fieldNumberQuest_can_fetch = 9;
	private final boolean hasQuest_can_fetch;

	private final int ach_can_fetch;
	private static final int fieldNumberAch_can_fetch = 10;
	private final boolean hasAch_can_fetch;

	private final boolean first_buy_gold;
	private static final int fieldNumberFirst_buy_gold = 11;
	private final boolean hasFirst_buy_gold;

	private final int portrait;
	private static final int fieldNumberPortrait = 12;
	private final boolean hasPortrait;

	private final int collect_score;
	private static final int fieldNumberCollect_score = 13;
	private final boolean hasCollect_score;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_enter_hall(final Builder builder) {
			this.place_infos = builder.place_infos;
			this.name = builder.name;
			this.hasName = builder.hasName;
			this.gold = builder.gold;
			this.hasGold = builder.hasGold;
			this.exp = builder.exp;
			this.hasExp = builder.hasExp;
			this.level = builder.level;
			this.hasLevel = builder.hasLevel;
			this.sex = builder.sex;
			this.hasSex = builder.hasSex;
			this.vip = builder.vip;
			this.hasVip = builder.hasVip;
			this.quest_can_fetch = builder.quest_can_fetch;
			this.hasQuest_can_fetch = builder.hasQuest_can_fetch;
			this.ach_can_fetch = builder.ach_can_fetch;
			this.hasAch_can_fetch = builder.hasAch_can_fetch;
			this.first_buy_gold = builder.first_buy_gold;
			this.hasFirst_buy_gold = builder.hasFirst_buy_gold;
			this.portrait = builder.portrait;
			this.hasPortrait = builder.hasPortrait;
			this.collect_score = builder.collect_score;
			this.hasCollect_score = builder.hasCollect_score;
			}

	public static class Builder {
		private java.util.Vector place_infos = new java.util.Vector();
		private boolean hasPlace_infos = false;

		private String name;
		private boolean hasName = false;

		private long gold;
		private boolean hasGold = false;

		private long exp;
		private boolean hasExp = false;

		private int level;
		private boolean hasLevel = false;

		private int sex;
		private boolean hasSex = false;

		private int vip;
		private boolean hasVip = false;

		private int quest_can_fetch;
		private boolean hasQuest_can_fetch = false;

		private int ach_can_fetch;
		private boolean hasAch_can_fetch = false;

		private boolean first_buy_gold;
		private boolean hasFirst_buy_gold = false;

		private int portrait;
		private boolean hasPortrait = false;

		private int collect_score;
		private boolean hasCollect_score = false;


		private Builder() {
		}

		public Builder setPlace_infos(final java.util.Vector place_infos) {
			if(!hasPlace_infos) {
				hasPlace_infos = true;
			}
			this.place_infos = place_infos;
			return this;
		}


		public Builder addElementPlace_infos(final place_info element) {
			if(!hasPlace_infos) {
				hasPlace_infos = true;
			}
			place_infos.addElement(element);
			return this;
		}

		public Builder setName(final String name) {
			this.name = name;
			this.hasName = true;
			return this;
		}

		public Builder setGold(final long gold) {
			this.gold = gold;
			this.hasGold = true;
			return this;
		}

		public Builder setExp(final long exp) {
			this.exp = exp;
			this.hasExp = true;
			return this;
		}

		public Builder setLevel(final int level) {
			this.level = level;
			this.hasLevel = true;
			return this;
		}

		public Builder setSex(final int sex) {
			this.sex = sex;
			this.hasSex = true;
			return this;
		}

		public Builder setVip(final int vip) {
			this.vip = vip;
			this.hasVip = true;
			return this;
		}

		public Builder setQuest_can_fetch(final int quest_can_fetch) {
			this.quest_can_fetch = quest_can_fetch;
			this.hasQuest_can_fetch = true;
			return this;
		}

		public Builder setAch_can_fetch(final int ach_can_fetch) {
			this.ach_can_fetch = ach_can_fetch;
			this.hasAch_can_fetch = true;
			return this;
		}

		public Builder setFirst_buy_gold(final boolean first_buy_gold) {
			this.first_buy_gold = first_buy_gold;
			this.hasFirst_buy_gold = true;
			return this;
		}

		public Builder setPortrait(final int portrait) {
			this.portrait = portrait;
			this.hasPortrait = true;
			return this;
		}

		public Builder setCollect_score(final int collect_score) {
			this.collect_score = collect_score;
			this.hasCollect_score = true;
			return this;
		}

		public sc_enter_hall build() {
			return new sc_enter_hall(this);
		}
	}

	public java.util.Vector getPlace_infos() {
		return place_infos;
	}

	public String getName() {
		return name;
	}

	public boolean hasName() {
		return hasName;
	}

	public long getGold() {
		return gold;
	}

	public boolean hasGold() {
		return hasGold;
	}

	public long getExp() {
		return exp;
	}

	public boolean hasExp() {
		return hasExp;
	}

	public int getLevel() {
		return level;
	}

	public boolean hasLevel() {
		return hasLevel;
	}

	public int getSex() {
		return sex;
	}

	public boolean hasSex() {
		return hasSex;
	}

	public int getVip() {
		return vip;
	}

	public boolean hasVip() {
		return hasVip;
	}

	public int getQuest_can_fetch() {
		return quest_can_fetch;
	}

	public boolean hasQuest_can_fetch() {
		return hasQuest_can_fetch;
	}

	public int getAch_can_fetch() {
		return ach_can_fetch;
	}

	public boolean hasAch_can_fetch() {
		return hasAch_can_fetch;
	}

	public boolean getFirst_buy_gold() {
		return first_buy_gold;
	}

	public boolean hasFirst_buy_gold() {
		return hasFirst_buy_gold;
	}

	public int getPortrait() {
		return portrait;
	}

	public boolean hasPortrait() {
		return hasPortrait;
	}

	public int getCollect_score() {
		return collect_score;
	}

	public boolean hasCollect_score() {
		return hasCollect_score;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "place_infos = " + this.place_infos + TAB;
		if(hasName) retValue += "name = " + this.name + TAB;
		if(hasGold) retValue += "gold = " + this.gold + TAB;
		if(hasExp) retValue += "exp = " + this.exp + TAB;
		if(hasLevel) retValue += "level = " + this.level + TAB;
		if(hasSex) retValue += "sex = " + this.sex + TAB;
		if(hasVip) retValue += "vip = " + this.vip + TAB;
		if(hasQuest_can_fetch) retValue += "quest_can_fetch = " + this.quest_can_fetch + TAB;
		if(hasAch_can_fetch) retValue += "ach_can_fetch = " + this.ach_can_fetch + TAB;
		if(hasFirst_buy_gold) retValue += "first_buy_gold = " + this.first_buy_gold + TAB;
		if(hasPortrait) retValue += "portrait = " + this.portrait + TAB;
		if(hasCollect_score) retValue += "collect_score = " + this.collect_score + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasName) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberName, name);
		if(hasGold) totalSize += ComputeSizeUtil.computeLongSize(fieldNumberGold, gold);
		if(hasExp) totalSize += ComputeSizeUtil.computeLongSize(fieldNumberExp, exp);
		if(hasLevel) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberLevel, level);
		if(hasSex) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSex, sex);
		if(hasVip) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberVip, vip);
		if(hasQuest_can_fetch) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberQuest_can_fetch, quest_can_fetch);
		if(hasAch_can_fetch) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberAch_can_fetch, ach_can_fetch);
		if(hasFirst_buy_gold) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberFirst_buy_gold, first_buy_gold);
		if(hasPortrait) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberPortrait, portrait);
		if(hasCollect_score) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberCollect_score, collect_score);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberPlace_infos, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, place_infos);

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeList(fieldNumberPlace_infos, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, place_infos);
		if(hasName) writer.writeString(fieldNumberName, name);
		if(hasGold) writer.writeLong(fieldNumberGold, gold);
		if(hasExp) writer.writeLong(fieldNumberExp, exp);
		if(hasLevel) writer.writeInt(fieldNumberLevel, level);
		if(hasSex) writer.writeInt(fieldNumberSex, sex);
		if(hasVip) writer.writeInt(fieldNumberVip, vip);
		if(hasQuest_can_fetch) writer.writeInt(fieldNumberQuest_can_fetch, quest_can_fetch);
		if(hasAch_can_fetch) writer.writeInt(fieldNumberAch_can_fetch, ach_can_fetch);
		if(hasFirst_buy_gold) writer.writeBoolean(fieldNumberFirst_buy_gold, first_buy_gold);
		if(hasPortrait) writer.writeInt(fieldNumberPortrait, portrait);
		if(hasCollect_score) writer.writeInt(fieldNumberCollect_score, collect_score);
	}

	static sc_enter_hall parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_enter_hall.Builder builder = sc_enter_hall.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberPlace_infos:
			 java.util.Vector vcPlace_infos = reader.readMessages(fieldNumberPlace_infos);
				for(int i = 0 ; i < vcPlace_infos.size(); i++) {
					byte[] eachBinData = (byte[]) vcPlace_infos.elementAt(i);
					place_info.Builder builderPlace_infos = place_info.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolPlace_infos = true;
					int nestedFieldPlace_infos = -1;
					while(boolPlace_infos) {
						nestedFieldPlace_infos = getNextFieldNumber(innerInputReader);
						boolPlace_infos = place_info.populateBuilderWithField(innerInputReader, builderPlace_infos, nestedFieldPlace_infos);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementPlace_infos(builderPlace_infos.build());
				}
				break;
			case fieldNumberName:
				builder.setName(reader.readString(fieldNumber));
				break;
			case fieldNumberGold:
				builder.setGold(reader.readLong(fieldNumber));
				break;
			case fieldNumberExp:
				builder.setExp(reader.readLong(fieldNumber));
				break;
			case fieldNumberLevel:
				builder.setLevel(reader.readInt(fieldNumber));
				break;
			case fieldNumberSex:
				builder.setSex(reader.readInt(fieldNumber));
				break;
			case fieldNumberVip:
				builder.setVip(reader.readInt(fieldNumber));
				break;
			case fieldNumberQuest_can_fetch:
				builder.setQuest_can_fetch(reader.readInt(fieldNumber));
				break;
			case fieldNumberAch_can_fetch:
				builder.setAch_can_fetch(reader.readInt(fieldNumber));
				break;
			case fieldNumberFirst_buy_gold:
				builder.setFirst_buy_gold(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberPortrait:
				builder.setPortrait(reader.readInt(fieldNumber));
				break;
			case fieldNumberCollect_score:
				builder.setCollect_score(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_enter_hall.unknownTagHandler = unknownTagHandler;
	}

	public static sc_enter_hall parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_enter_hall parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_enter_hall parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}