package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:46 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_friend_follow extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int result;
	private static final int fieldNumberResult = 1;
	private final boolean hasResult;

	private final String host;
	private static final int fieldNumberHost = 3;
	private final boolean hasHost;

	private final int port;
	private static final int fieldNumberPort = 4;
	private final boolean hasPort;

	private final int table;
	private static final int fieldNumberTable = 5;
	private final boolean hasTable;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_friend_follow(final Builder builder) {
			this.result = builder.result;
			this.hasResult = builder.hasResult;
			this.host = builder.host;
			this.hasHost = builder.hasHost;
			this.port = builder.port;
			this.hasPort = builder.hasPort;
			this.table = builder.table;
			this.hasTable = builder.hasTable;
			}

	public static class Builder {
		private int result;
		private boolean hasResult = false;

		private String host;
		private boolean hasHost = false;

		private int port;
		private boolean hasPort = false;

		private int table;
		private boolean hasTable = false;


		private Builder() {
		}

		public Builder setResult(final int result) {
			this.result = result;
			this.hasResult = true;
			return this;
		}

		public Builder setHost(final String host) {
			this.host = host;
			this.hasHost = true;
			return this;
		}

		public Builder setPort(final int port) {
			this.port = port;
			this.hasPort = true;
			return this;
		}

		public Builder setTable(final int table) {
			this.table = table;
			this.hasTable = true;
			return this;
		}

		public sc_friend_follow build() {
			return new sc_friend_follow(this);
		}
	}

	public int getResult() {
		return result;
	}

	public boolean hasResult() {
		return hasResult;
	}

	public String getHost() {
		return host;
	}

	public boolean hasHost() {
		return hasHost;
	}

	public int getPort() {
		return port;
	}

	public boolean hasPort() {
		return hasPort;
	}

	public int getTable() {
		return table;
	}

	public boolean hasTable() {
		return hasTable;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasResult) retValue += "result = " + this.result + TAB;
		if(hasHost) retValue += "host = " + this.host + TAB;
		if(hasPort) retValue += "port = " + this.port + TAB;
		if(hasTable) retValue += "table = " + this.table + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasResult) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberResult, result);
		if(hasHost) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberHost, host);
		if(hasPort) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberPort, port);
		if(hasTable) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTable, table);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasResult) writer.writeInt(fieldNumberResult, result);
		if(hasHost) writer.writeString(fieldNumberHost, host);
		if(hasPort) writer.writeInt(fieldNumberPort, port);
		if(hasTable) writer.writeInt(fieldNumberTable, table);
	}

	static sc_friend_follow parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_friend_follow.Builder builder = sc_friend_follow.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberResult:
				builder.setResult(reader.readInt(fieldNumber));
				break;
			case fieldNumberHost:
				builder.setHost(reader.readString(fieldNumber));
				break;
			case fieldNumberPort:
				builder.setPort(reader.readInt(fieldNumber));
				break;
			case fieldNumberTable:
				builder.setTable(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_friend_follow.unknownTagHandler = unknownTagHandler;
	}

	public static sc_friend_follow parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_friend_follow parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_friend_follow parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}