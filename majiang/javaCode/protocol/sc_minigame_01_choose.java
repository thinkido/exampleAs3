package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_minigame_01_choose extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final boolean right;
	private static final int fieldNumberRight = 1;
	private final boolean hasRight;

	private final int curPoint;
	private static final int fieldNumberCurPoint = 2;
	private final boolean hasCurPoint;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_minigame_01_choose(final Builder builder) {
			this.right = builder.right;
			this.hasRight = builder.hasRight;
			this.curPoint = builder.curPoint;
			this.hasCurPoint = builder.hasCurPoint;
			}

	public static class Builder {
		private boolean right;
		private boolean hasRight = false;

		private int curPoint;
		private boolean hasCurPoint = false;


		private Builder() {
		}

		public Builder setRight(final boolean right) {
			this.right = right;
			this.hasRight = true;
			return this;
		}

		public Builder setCurPoint(final int curPoint) {
			this.curPoint = curPoint;
			this.hasCurPoint = true;
			return this;
		}

		public sc_minigame_01_choose build() {
			return new sc_minigame_01_choose(this);
		}
	}

	public boolean getRight() {
		return right;
	}

	public boolean hasRight() {
		return hasRight;
	}

	public int getCurPoint() {
		return curPoint;
	}

	public boolean hasCurPoint() {
		return hasCurPoint;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasRight) retValue += "right = " + this.right + TAB;
		if(hasCurPoint) retValue += "curPoint = " + this.curPoint + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasRight) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberRight, right);
		if(hasCurPoint) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberCurPoint, curPoint);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasRight) writer.writeBoolean(fieldNumberRight, right);
		if(hasCurPoint) writer.writeInt(fieldNumberCurPoint, curPoint);
	}

	static sc_minigame_01_choose parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_minigame_01_choose.Builder builder = sc_minigame_01_choose.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberRight:
				builder.setRight(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberCurPoint:
				builder.setCurPoint(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_minigame_01_choose.unknownTagHandler = unknownTagHandler;
	}

	public static sc_minigame_01_choose parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_minigame_01_choose parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_minigame_01_choose parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}