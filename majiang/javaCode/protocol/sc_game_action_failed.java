package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:47 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_game_action_failed extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int id;
	private static final int fieldNumberId = 1;
	private final boolean hasId;

	private final int sub_id;
	private static final int fieldNumberSub_id = 2;
	private final boolean hasSub_id;

	private final int reason;
	private static final int fieldNumberReason = 3;
	private final boolean hasReason;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_game_action_failed(final Builder builder) {
			this.id = builder.id;
			this.hasId = builder.hasId;
			this.sub_id = builder.sub_id;
			this.hasSub_id = builder.hasSub_id;
			this.reason = builder.reason;
			this.hasReason = builder.hasReason;
			}

	public static class Builder {
		private int id;
		private boolean hasId = false;

		private int sub_id;
		private boolean hasSub_id = false;

		private int reason;
		private boolean hasReason = false;


		private Builder() {
		}

		public Builder setId(final int id) {
			this.id = id;
			this.hasId = true;
			return this;
		}

		public Builder setSub_id(final int sub_id) {
			this.sub_id = sub_id;
			this.hasSub_id = true;
			return this;
		}

		public Builder setReason(final int reason) {
			this.reason = reason;
			this.hasReason = true;
			return this;
		}

		public sc_game_action_failed build() {
			return new sc_game_action_failed(this);
		}
	}

	public int getId() {
		return id;
	}

	public boolean hasId() {
		return hasId;
	}

	public int getSub_id() {
		return sub_id;
	}

	public boolean hasSub_id() {
		return hasSub_id;
	}

	public int getReason() {
		return reason;
	}

	public boolean hasReason() {
		return hasReason;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasId) retValue += "id = " + this.id + TAB;
		if(hasSub_id) retValue += "sub_id = " + this.sub_id + TAB;
		if(hasReason) retValue += "reason = " + this.reason + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasId) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberId, id);
		if(hasSub_id) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSub_id, sub_id);
		if(hasReason) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberReason, reason);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasId) writer.writeInt(fieldNumberId, id);
		if(hasSub_id) writer.writeInt(fieldNumberSub_id, sub_id);
		if(hasReason) writer.writeInt(fieldNumberReason, reason);
	}

	static sc_game_action_failed parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_game_action_failed.Builder builder = sc_game_action_failed.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberId:
				builder.setId(reader.readInt(fieldNumber));
				break;
			case fieldNumberSub_id:
				builder.setSub_id(reader.readInt(fieldNumber));
				break;
			case fieldNumberReason:
				builder.setReason(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_game_action_failed.unknownTagHandler = unknownTagHandler;
	}

	public static sc_game_action_failed parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_game_action_failed parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_game_action_failed parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}