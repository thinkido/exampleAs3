package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class scgame_show_actions extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int id;
	private static final int fieldNumberId = 1;
	private final boolean hasId;

	private final int sub_id;
	private static final int fieldNumberSub_id = 2;
	private final boolean hasSub_id;

	private final java.util.Vector tile_seq;
	private static final int fieldNumberTile_seq = 3;

	private final st_hu_desc hu_desc;
	private static final int fieldNumberHu_desc = 4;
	private final boolean hasHu_desc;

	private final int acted_seat_index;
	private static final int fieldNumberActed_seat_index = 5;
	private final boolean hasActed_seat_index;


	public static Builder newBuilder() {
		return new Builder();
	}

	private scgame_show_actions(final Builder builder) {
			this.id = builder.id;
			this.hasId = builder.hasId;
			this.sub_id = builder.sub_id;
			this.hasSub_id = builder.hasSub_id;
			this.tile_seq = builder.tile_seq;
			this.hu_desc = builder.hu_desc;
			this.hasHu_desc = builder.hasHu_desc;
			this.acted_seat_index = builder.acted_seat_index;
			this.hasActed_seat_index = builder.hasActed_seat_index;
			}

	public static class Builder {
		private int id;
		private boolean hasId = false;

		private int sub_id;
		private boolean hasSub_id = false;

		private java.util.Vector tile_seq = new java.util.Vector();
		private boolean hasTile_seq = false;

		private st_hu_desc hu_desc;
		private boolean hasHu_desc = false;

		private int acted_seat_index;
		private boolean hasActed_seat_index = false;


		private Builder() {
		}

		public Builder setId(final int id) {
			this.id = id;
			this.hasId = true;
			return this;
		}

		public Builder setSub_id(final int sub_id) {
			this.sub_id = sub_id;
			this.hasSub_id = true;
			return this;
		}

		public Builder setTile_seq(final java.util.Vector tile_seq) {
			if(!hasTile_seq) {
				hasTile_seq = true;
			}
			this.tile_seq = tile_seq;
			return this;
		}


		public Builder addElementTile_seq(final int element) {
			if(!hasTile_seq) {
				hasTile_seq = true;
			}
			tile_seq.addElement(new Integer(element));
			return this;
		}

		public Builder setHu_desc(final st_hu_desc hu_desc) {
			this.hu_desc = hu_desc;
			this.hasHu_desc = true;
			return this;
		}

		public Builder setActed_seat_index(final int acted_seat_index) {
			this.acted_seat_index = acted_seat_index;
			this.hasActed_seat_index = true;
			return this;
		}

		public scgame_show_actions build() {
			return new scgame_show_actions(this);
		}
	}

	public int getId() {
		return id;
	}

	public boolean hasId() {
		return hasId;
	}

	public int getSub_id() {
		return sub_id;
	}

	public boolean hasSub_id() {
		return hasSub_id;
	}

	public java.util.Vector getTile_seq() {
		return tile_seq;
	}

	public st_hu_desc getHu_desc() {
		return hu_desc;
	}

	public boolean hasHu_desc() {
		return hasHu_desc;
	}

	public int getActed_seat_index() {
		return acted_seat_index;
	}

	public boolean hasActed_seat_index() {
		return hasActed_seat_index;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasId) retValue += "id = " + this.id + TAB;
		if(hasSub_id) retValue += "sub_id = " + this.sub_id + TAB;
		retValue += "tile_seq = " + this.tile_seq + TAB;
		if(hasHu_desc) retValue += "hu_desc = " + this.hu_desc + TAB;
		if(hasActed_seat_index) retValue += "acted_seat_index = " + this.acted_seat_index + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasId) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberId, id);
		if(hasSub_id) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSub_id, sub_id);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberTile_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, tile_seq);
		if(hasActed_seat_index) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberActed_seat_index, acted_seat_index);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasHu_desc) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberHu_desc, hu_desc.computeSize());

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasId) writer.writeInt(fieldNumberId, id);
		if(hasSub_id) writer.writeInt(fieldNumberSub_id, sub_id);
		writer.writeList(fieldNumberTile_seq, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, tile_seq);
		if(hasHu_desc) { writer.writeMessage(fieldNumberHu_desc, hu_desc.computeSize()); hu_desc.writeFields(writer); }
		if(hasActed_seat_index) writer.writeInt(fieldNumberActed_seat_index, acted_seat_index);
	}

	static scgame_show_actions parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final scgame_show_actions.Builder builder = scgame_show_actions.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberId:
				builder.setId(reader.readInt(fieldNumber));
				break;
			case fieldNumberSub_id:
				builder.setSub_id(reader.readInt(fieldNumber));
				break;
			case fieldNumberTile_seq:
				builder.addElementTile_seq(reader.readInt(fieldNumber));
				break;
			case fieldNumberHu_desc:
			 java.util.Vector vcHu_desc = reader.readMessages(fieldNumberHu_desc);
				for(int i = 0 ; i < vcHu_desc.size(); i++) {
					byte[] eachBinData = (byte[]) vcHu_desc.elementAt(i);
					st_hu_desc.Builder builderHu_desc = st_hu_desc.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolHu_desc = true;
					int nestedFieldHu_desc = -1;
					while(boolHu_desc) {
						nestedFieldHu_desc = getNextFieldNumber(innerInputReader);
						boolHu_desc = st_hu_desc.populateBuilderWithField(innerInputReader, builderHu_desc, nestedFieldHu_desc);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setHu_desc(builderHu_desc.build());
				}
				break;
			case fieldNumberActed_seat_index:
				builder.setActed_seat_index(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		scgame_show_actions.unknownTagHandler = unknownTagHandler;
	}

	public static scgame_show_actions parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static scgame_show_actions parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static scgame_show_actions parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}