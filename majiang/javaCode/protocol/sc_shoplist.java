package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:46 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_shoplist extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int shop_discount;
	private static final int fieldNumberShop_discount = 1;
	private final boolean hasShop_discount;

	private final boolean shop_maintain;
	private static final int fieldNumberShop_maintain = 2;
	private final boolean hasShop_maintain;

	private final java.util.Vector lists;
	private static final int fieldNumberLists = 3;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_shoplist(final Builder builder) {
			this.shop_discount = builder.shop_discount;
			this.hasShop_discount = builder.hasShop_discount;
			this.shop_maintain = builder.shop_maintain;
			this.hasShop_maintain = builder.hasShop_maintain;
			this.lists = builder.lists;
			}

	public static class Builder {
		private int shop_discount;
		private boolean hasShop_discount = false;

		private boolean shop_maintain;
		private boolean hasShop_maintain = false;

		private java.util.Vector lists = new java.util.Vector();
		private boolean hasLists = false;


		private Builder() {
		}

		public Builder setShop_discount(final int shop_discount) {
			this.shop_discount = shop_discount;
			this.hasShop_discount = true;
			return this;
		}

		public Builder setShop_maintain(final boolean shop_maintain) {
			this.shop_maintain = shop_maintain;
			this.hasShop_maintain = true;
			return this;
		}

		public Builder setLists(final java.util.Vector lists) {
			if(!hasLists) {
				hasLists = true;
			}
			this.lists = lists;
			return this;
		}


		public Builder addElementLists(final t_shopitem element) {
			if(!hasLists) {
				hasLists = true;
			}
			lists.addElement(element);
			return this;
		}

		public sc_shoplist build() {
			return new sc_shoplist(this);
		}
	}

	public int getShop_discount() {
		return shop_discount;
	}

	public boolean hasShop_discount() {
		return hasShop_discount;
	}

	public boolean getShop_maintain() {
		return shop_maintain;
	}

	public boolean hasShop_maintain() {
		return hasShop_maintain;
	}

	public java.util.Vector getLists() {
		return lists;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasShop_discount) retValue += "shop_discount = " + this.shop_discount + TAB;
		if(hasShop_maintain) retValue += "shop_maintain = " + this.shop_maintain + TAB;
		retValue += "lists = " + this.lists + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasShop_discount) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberShop_discount, shop_discount);
		if(hasShop_maintain) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberShop_maintain, shop_maintain);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberLists, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, lists);

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasShop_discount) writer.writeInt(fieldNumberShop_discount, shop_discount);
		if(hasShop_maintain) writer.writeBoolean(fieldNumberShop_maintain, shop_maintain);
		writer.writeList(fieldNumberLists, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, lists);
	}

	static sc_shoplist parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_shoplist.Builder builder = sc_shoplist.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberShop_discount:
				builder.setShop_discount(reader.readInt(fieldNumber));
				break;
			case fieldNumberShop_maintain:
				builder.setShop_maintain(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberLists:
			 java.util.Vector vcLists = reader.readMessages(fieldNumberLists);
				for(int i = 0 ; i < vcLists.size(); i++) {
					byte[] eachBinData = (byte[]) vcLists.elementAt(i);
					t_shopitem.Builder builderLists = t_shopitem.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolLists = true;
					int nestedFieldLists = -1;
					while(boolLists) {
						nestedFieldLists = getNextFieldNumber(innerInputReader);
						boolLists = t_shopitem.populateBuilderWithField(innerInputReader, builderLists, nestedFieldLists);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementLists(builderLists.build());
				}
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_shoplist.unknownTagHandler = unknownTagHandler;
	}

	public static sc_shoplist parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_shoplist parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_shoplist parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}