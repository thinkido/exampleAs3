package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_minigame_01_start extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final boolean result;
	private static final int fieldNumberResult = 1;
	private final boolean hasResult;

	private final String error;
	private static final int fieldNumberError = 2;
	private final boolean hasError;

	private final int curPoint;
	private static final int fieldNumberCurPoint = 3;
	private final boolean hasCurPoint;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_minigame_01_start(final Builder builder) {
			this.result = builder.result;
			this.hasResult = builder.hasResult;
			this.error = builder.error;
			this.hasError = builder.hasError;
			this.curPoint = builder.curPoint;
			this.hasCurPoint = builder.hasCurPoint;
			}

	public static class Builder {
		private boolean result;
		private boolean hasResult = false;

		private String error;
		private boolean hasError = false;

		private int curPoint;
		private boolean hasCurPoint = false;


		private Builder() {
		}

		public Builder setResult(final boolean result) {
			this.result = result;
			this.hasResult = true;
			return this;
		}

		public Builder setError(final String error) {
			this.error = error;
			this.hasError = true;
			return this;
		}

		public Builder setCurPoint(final int curPoint) {
			this.curPoint = curPoint;
			this.hasCurPoint = true;
			return this;
		}

		public sc_minigame_01_start build() {
			return new sc_minigame_01_start(this);
		}
	}

	public boolean getResult() {
		return result;
	}

	public boolean hasResult() {
		return hasResult;
	}

	public String getError() {
		return error;
	}

	public boolean hasError() {
		return hasError;
	}

	public int getCurPoint() {
		return curPoint;
	}

	public boolean hasCurPoint() {
		return hasCurPoint;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasResult) retValue += "result = " + this.result + TAB;
		if(hasError) retValue += "error = " + this.error + TAB;
		if(hasCurPoint) retValue += "curPoint = " + this.curPoint + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasResult) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberResult, result);
		if(hasError) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberError, error);
		if(hasCurPoint) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberCurPoint, curPoint);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasResult) writer.writeBoolean(fieldNumberResult, result);
		if(hasError) writer.writeString(fieldNumberError, error);
		if(hasCurPoint) writer.writeInt(fieldNumberCurPoint, curPoint);
	}

	static sc_minigame_01_start parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_minigame_01_start.Builder builder = sc_minigame_01_start.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberResult:
				builder.setResult(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberError:
				builder.setError(reader.readString(fieldNumber));
				break;
			case fieldNumberCurPoint:
				builder.setCurPoint(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_minigame_01_start.unknownTagHandler = unknownTagHandler;
	}

	public static sc_minigame_01_start parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_minigame_01_start parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_minigame_01_start parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}