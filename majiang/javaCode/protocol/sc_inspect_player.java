package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_inspect_player extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final String pid;
	private static final int fieldNumberPid = 1;
	private final boolean hasPid;

	private final String name;
	private static final int fieldNumberName = 2;
	private final boolean hasName;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_inspect_player(final Builder builder) {
			this.pid = builder.pid;
			this.hasPid = builder.hasPid;
			this.name = builder.name;
			this.hasName = builder.hasName;
			}

	public static class Builder {
		private String pid;
		private boolean hasPid = false;

		private String name;
		private boolean hasName = false;


		private Builder() {
		}

		public Builder setPid(final String pid) {
			this.pid = pid;
			this.hasPid = true;
			return this;
		}

		public Builder setName(final String name) {
			this.name = name;
			this.hasName = true;
			return this;
		}

		public sc_inspect_player build() {
			return new sc_inspect_player(this);
		}
	}

	public String getPid() {
		return pid;
	}

	public boolean hasPid() {
		return hasPid;
	}

	public String getName() {
		return name;
	}

	public boolean hasName() {
		return hasName;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasPid) retValue += "pid = " + this.pid + TAB;
		if(hasName) retValue += "name = " + this.name + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasPid) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberPid, pid);
		if(hasName) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberName, name);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasPid) writer.writeString(fieldNumberPid, pid);
		if(hasName) writer.writeString(fieldNumberName, name);
	}

	static sc_inspect_player parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_inspect_player.Builder builder = sc_inspect_player.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberPid:
				builder.setPid(reader.readString(fieldNumber));
				break;
			case fieldNumberName:
				builder.setName(reader.readString(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_inspect_player.unknownTagHandler = unknownTagHandler;
	}

	public static sc_inspect_player parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_inspect_player parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_inspect_player parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}