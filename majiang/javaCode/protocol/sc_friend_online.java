package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:16 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_friend_online extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final boolean online;
	private static final int fieldNumberOnline = 1;
	private final boolean hasOnline;

	private final String name;
	private static final int fieldNumberName = 2;
	private final boolean hasName;

	private final boolean dual_friend;
	private static final int fieldNumberDual_friend = 3;
	private final boolean hasDual_friend;

	private final String id;
	private static final int fieldNumberId = 4;
	private final boolean hasId;

	private final String idtype;
	private static final int fieldNumberIdtype = 5;
	private final boolean hasIdtype;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_friend_online(final Builder builder) {
			this.online = builder.online;
			this.hasOnline = builder.hasOnline;
			this.name = builder.name;
			this.hasName = builder.hasName;
			this.dual_friend = builder.dual_friend;
			this.hasDual_friend = builder.hasDual_friend;
			this.id = builder.id;
			this.hasId = builder.hasId;
			this.idtype = builder.idtype;
			this.hasIdtype = builder.hasIdtype;
			}

	public static class Builder {
		private boolean online;
		private boolean hasOnline = false;

		private String name;
		private boolean hasName = false;

		private boolean dual_friend;
		private boolean hasDual_friend = false;

		private String id;
		private boolean hasId = false;

		private String idtype;
		private boolean hasIdtype = false;


		private Builder() {
		}

		public Builder setOnline(final boolean online) {
			this.online = online;
			this.hasOnline = true;
			return this;
		}

		public Builder setName(final String name) {
			this.name = name;
			this.hasName = true;
			return this;
		}

		public Builder setDual_friend(final boolean dual_friend) {
			this.dual_friend = dual_friend;
			this.hasDual_friend = true;
			return this;
		}

		public Builder setId(final String id) {
			this.id = id;
			this.hasId = true;
			return this;
		}

		public Builder setIdtype(final String idtype) {
			this.idtype = idtype;
			this.hasIdtype = true;
			return this;
		}

		public sc_friend_online build() {
			return new sc_friend_online(this);
		}
	}

	public boolean getOnline() {
		return online;
	}

	public boolean hasOnline() {
		return hasOnline;
	}

	public String getName() {
		return name;
	}

	public boolean hasName() {
		return hasName;
	}

	public boolean getDual_friend() {
		return dual_friend;
	}

	public boolean hasDual_friend() {
		return hasDual_friend;
	}

	public String getId() {
		return id;
	}

	public boolean hasId() {
		return hasId;
	}

	public String getIdtype() {
		return idtype;
	}

	public boolean hasIdtype() {
		return hasIdtype;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasOnline) retValue += "online = " + this.online + TAB;
		if(hasName) retValue += "name = " + this.name + TAB;
		if(hasDual_friend) retValue += "dual_friend = " + this.dual_friend + TAB;
		if(hasId) retValue += "id = " + this.id + TAB;
		if(hasIdtype) retValue += "idtype = " + this.idtype + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasOnline) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberOnline, online);
		if(hasName) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberName, name);
		if(hasDual_friend) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberDual_friend, dual_friend);
		if(hasId) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberId, id);
		if(hasIdtype) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberIdtype, idtype);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasOnline) writer.writeBoolean(fieldNumberOnline, online);
		if(hasName) writer.writeString(fieldNumberName, name);
		if(hasDual_friend) writer.writeBoolean(fieldNumberDual_friend, dual_friend);
		if(hasId) writer.writeString(fieldNumberId, id);
		if(hasIdtype) writer.writeString(fieldNumberIdtype, idtype);
	}

	static sc_friend_online parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_friend_online.Builder builder = sc_friend_online.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberOnline:
				builder.setOnline(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberName:
				builder.setName(reader.readString(fieldNumber));
				break;
			case fieldNumberDual_friend:
				builder.setDual_friend(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberId:
				builder.setId(reader.readString(fieldNumber));
				break;
			case fieldNumberIdtype:
				builder.setIdtype(reader.readString(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_friend_online.unknownTagHandler = unknownTagHandler;
	}

	public static sc_friend_online parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_friend_online parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_friend_online parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}