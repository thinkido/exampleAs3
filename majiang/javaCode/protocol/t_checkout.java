package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:46 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class t_checkout extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int type;
	private static final int fieldNumberType = 1;
	private final boolean hasType;

	private final int value;
	private static final int fieldNumberValue = 2;
	private final boolean hasValue;


	public static Builder newBuilder() {
		return new Builder();
	}

	private t_checkout(final Builder builder) {
			this.type = builder.type;
			this.hasType = builder.hasType;
			this.value = builder.value;
			this.hasValue = builder.hasValue;
			}

	public static class Builder {
		private int type;
		private boolean hasType = false;

		private int value;
		private boolean hasValue = false;


		private Builder() {
		}

		public Builder setType(final int type) {
			this.type = type;
			this.hasType = true;
			return this;
		}

		public Builder setValue(final int value) {
			this.value = value;
			this.hasValue = true;
			return this;
		}

		public t_checkout build() {
			return new t_checkout(this);
		}
	}

	public int getType() {
		return type;
	}

	public boolean hasType() {
		return hasType;
	}

	public int getValue() {
		return value;
	}

	public boolean hasValue() {
		return hasValue;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasType) retValue += "type = " + this.type + TAB;
		if(hasValue) retValue += "value = " + this.value + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasType) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberType, type);
		if(hasValue) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberValue, value);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasType) writer.writeInt(fieldNumberType, type);
		if(hasValue) writer.writeInt(fieldNumberValue, value);
	}

	static t_checkout parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final t_checkout.Builder builder = t_checkout.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberType:
				builder.setType(reader.readInt(fieldNumber));
				break;
			case fieldNumberValue:
				builder.setValue(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		t_checkout.unknownTagHandler = unknownTagHandler;
	}

	public static t_checkout parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static t_checkout parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static t_checkout parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}