package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_game_show_actions extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int timeout;
	private static final int fieldNumberTimeout = 1;
	private final boolean hasTimeout;

	private final java.util.Vector show_actions;
	private static final int fieldNumberShow_actions = 2;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_game_show_actions(final Builder builder) {
			this.timeout = builder.timeout;
			this.hasTimeout = builder.hasTimeout;
			this.show_actions = builder.show_actions;
			}

	public static class Builder {
		private int timeout;
		private boolean hasTimeout = false;

		private java.util.Vector show_actions = new java.util.Vector();
		private boolean hasShow_actions = false;


		private Builder() {
		}

		public Builder setTimeout(final int timeout) {
			this.timeout = timeout;
			this.hasTimeout = true;
			return this;
		}

		public Builder setShow_actions(final java.util.Vector show_actions) {
			if(!hasShow_actions) {
				hasShow_actions = true;
			}
			this.show_actions = show_actions;
			return this;
		}


		public Builder addElementShow_actions(final scgame_show_actions element) {
			if(!hasShow_actions) {
				hasShow_actions = true;
			}
			show_actions.addElement(element);
			return this;
		}

		public sc_game_show_actions build() {
			return new sc_game_show_actions(this);
		}
	}

	public int getTimeout() {
		return timeout;
	}

	public boolean hasTimeout() {
		return hasTimeout;
	}

	public java.util.Vector getShow_actions() {
		return show_actions;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasTimeout) retValue += "timeout = " + this.timeout + TAB;
		retValue += "show_actions = " + this.show_actions + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasTimeout) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTimeout, timeout);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberShow_actions, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, show_actions);

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasTimeout) writer.writeInt(fieldNumberTimeout, timeout);
		writer.writeList(fieldNumberShow_actions, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, show_actions);
	}

	static sc_game_show_actions parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_game_show_actions.Builder builder = sc_game_show_actions.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberTimeout:
				builder.setTimeout(reader.readInt(fieldNumber));
				break;
			case fieldNumberShow_actions:
			 java.util.Vector vcShow_actions = reader.readMessages(fieldNumberShow_actions);
				for(int i = 0 ; i < vcShow_actions.size(); i++) {
					byte[] eachBinData = (byte[]) vcShow_actions.elementAt(i);
					scgame_show_actions.Builder builderShow_actions = scgame_show_actions.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolShow_actions = true;
					int nestedFieldShow_actions = -1;
					while(boolShow_actions) {
						nestedFieldShow_actions = getNextFieldNumber(innerInputReader);
						boolShow_actions = scgame_show_actions.populateBuilderWithField(innerInputReader, builderShow_actions, nestedFieldShow_actions);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementShow_actions(builderShow_actions.build());
				}
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_game_show_actions.unknownTagHandler = unknownTagHandler;
	}

	public static sc_game_show_actions parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_game_show_actions parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_game_show_actions parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}