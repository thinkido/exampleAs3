package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_enter_game extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int seat_index;
	private static final int fieldNumberSeat_index = 2;
	private final boolean hasSeat_index;

	private final java.util.Vector seat_infoes;
	private static final int fieldNumberSeat_infoes = 3;

	private final String rev_name;
	private static final int fieldNumberRev_name = 4;
	private final boolean hasRev_name;

	private final int roomid;
	private static final int fieldNumberRoomid = 5;
	private final boolean hasRoomid;

	private final String room_level;
	private static final int fieldNumberRoom_level = 6;
	private final boolean hasRoom_level;

	private final int room_base;
	private static final int fieldNumberRoom_base = 7;
	private final boolean hasRoom_base;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_enter_game(final Builder builder) {
			this.seat_index = builder.seat_index;
			this.hasSeat_index = builder.hasSeat_index;
			this.seat_infoes = builder.seat_infoes;
			this.rev_name = builder.rev_name;
			this.hasRev_name = builder.hasRev_name;
			this.roomid = builder.roomid;
			this.hasRoomid = builder.hasRoomid;
			this.room_level = builder.room_level;
			this.hasRoom_level = builder.hasRoom_level;
			this.room_base = builder.room_base;
			this.hasRoom_base = builder.hasRoom_base;
			}

	public static class Builder {
		private int seat_index;
		private boolean hasSeat_index = false;

		private java.util.Vector seat_infoes = new java.util.Vector();
		private boolean hasSeat_infoes = false;

		private String rev_name;
		private boolean hasRev_name = false;

		private int roomid;
		private boolean hasRoomid = false;

		private String room_level;
		private boolean hasRoom_level = false;

		private int room_base;
		private boolean hasRoom_base = false;


		private Builder() {
		}

		public Builder setSeat_index(final int seat_index) {
			this.seat_index = seat_index;
			this.hasSeat_index = true;
			return this;
		}

		public Builder setSeat_infoes(final java.util.Vector seat_infoes) {
			if(!hasSeat_infoes) {
				hasSeat_infoes = true;
			}
			this.seat_infoes = seat_infoes;
			return this;
		}


		public Builder addElementSeat_infoes(final scenter_seat_info element) {
			if(!hasSeat_infoes) {
				hasSeat_infoes = true;
			}
			seat_infoes.addElement(element);
			return this;
		}

		public Builder setRev_name(final String rev_name) {
			this.rev_name = rev_name;
			this.hasRev_name = true;
			return this;
		}

		public Builder setRoomid(final int roomid) {
			this.roomid = roomid;
			this.hasRoomid = true;
			return this;
		}

		public Builder setRoom_level(final String room_level) {
			this.room_level = room_level;
			this.hasRoom_level = true;
			return this;
		}

		public Builder setRoom_base(final int room_base) {
			this.room_base = room_base;
			this.hasRoom_base = true;
			return this;
		}

		public sc_enter_game build() {
			return new sc_enter_game(this);
		}
	}

	public int getSeat_index() {
		return seat_index;
	}

	public boolean hasSeat_index() {
		return hasSeat_index;
	}

	public java.util.Vector getSeat_infoes() {
		return seat_infoes;
	}

	public String getRev_name() {
		return rev_name;
	}

	public boolean hasRev_name() {
		return hasRev_name;
	}

	public int getRoomid() {
		return roomid;
	}

	public boolean hasRoomid() {
		return hasRoomid;
	}

	public String getRoom_level() {
		return room_level;
	}

	public boolean hasRoom_level() {
		return hasRoom_level;
	}

	public int getRoom_base() {
		return room_base;
	}

	public boolean hasRoom_base() {
		return hasRoom_base;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasSeat_index) retValue += "seat_index = " + this.seat_index + TAB;
		retValue += "seat_infoes = " + this.seat_infoes + TAB;
		if(hasRev_name) retValue += "rev_name = " + this.rev_name + TAB;
		if(hasRoomid) retValue += "roomid = " + this.roomid + TAB;
		if(hasRoom_level) retValue += "room_level = " + this.room_level + TAB;
		if(hasRoom_base) retValue += "room_base = " + this.room_base + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasSeat_index) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberSeat_index, seat_index);
		if(hasRev_name) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberRev_name, rev_name);
		if(hasRoomid) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberRoomid, roomid);
		if(hasRoom_level) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberRoom_level, room_level);
		if(hasRoom_base) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberRoom_base, room_base);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		messageSize += ComputeSizeUtil.computeListSize(fieldNumberSeat_infoes, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, seat_infoes);

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasSeat_index) writer.writeInt(fieldNumberSeat_index, seat_index);
		writer.writeList(fieldNumberSeat_infoes, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_CUSTOM, seat_infoes);
		if(hasRev_name) writer.writeString(fieldNumberRev_name, rev_name);
		if(hasRoomid) writer.writeInt(fieldNumberRoomid, roomid);
		if(hasRoom_level) writer.writeString(fieldNumberRoom_level, room_level);
		if(hasRoom_base) writer.writeInt(fieldNumberRoom_base, room_base);
	}

	static sc_enter_game parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_enter_game.Builder builder = sc_enter_game.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberSeat_index:
				builder.setSeat_index(reader.readInt(fieldNumber));
				break;
			case fieldNumberSeat_infoes:
			 java.util.Vector vcSeat_infoes = reader.readMessages(fieldNumberSeat_infoes);
				for(int i = 0 ; i < vcSeat_infoes.size(); i++) {
					byte[] eachBinData = (byte[]) vcSeat_infoes.elementAt(i);
					scenter_seat_info.Builder builderSeat_infoes = scenter_seat_info.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolSeat_infoes = true;
					int nestedFieldSeat_infoes = -1;
					while(boolSeat_infoes) {
						nestedFieldSeat_infoes = getNextFieldNumber(innerInputReader);
						boolSeat_infoes = scenter_seat_info.populateBuilderWithField(innerInputReader, builderSeat_infoes, nestedFieldSeat_infoes);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.addElementSeat_infoes(builderSeat_infoes.build());
				}
				break;
			case fieldNumberRev_name:
				builder.setRev_name(reader.readString(fieldNumber));
				break;
			case fieldNumberRoomid:
				builder.setRoomid(reader.readInt(fieldNumber));
				break;
			case fieldNumberRoom_level:
				builder.setRoom_level(reader.readString(fieldNumber));
				break;
			case fieldNumberRoom_base:
				builder.setRoom_base(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_enter_game.unknownTagHandler = unknownTagHandler;
	}

	public static sc_enter_game parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_enter_game parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_enter_game parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}