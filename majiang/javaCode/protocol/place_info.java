package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:46 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class place_info extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final String id;
	private static final int fieldNumberId = 1;
	private final boolean hasId;

	private final String name;
	private static final int fieldNumberName = 2;
	private final boolean hasName;

	private final int base_zhu;
	private static final int fieldNumberBase_zhu = 3;
	private final boolean hasBase_zhu;

	private final int player_num;
	private static final int fieldNumberPlayer_num = 6;
	private final boolean hasPlayer_num;

	private final int req_player_gold;
	private static final int fieldNumberReq_player_gold = 8;
	private final boolean hasReq_player_gold;

	private final boolean can_enter;
	private static final int fieldNumberCan_enter = 9;
	private final boolean hasCan_enter;

	private final int chu_tile_time;
	private static final int fieldNumberChu_tile_time = 10;
	private final boolean hasChu_tile_time;


	public static Builder newBuilder() {
		return new Builder();
	}

	private place_info(final Builder builder) {
			this.id = builder.id;
			this.hasId = builder.hasId;
			this.name = builder.name;
			this.hasName = builder.hasName;
			this.base_zhu = builder.base_zhu;
			this.hasBase_zhu = builder.hasBase_zhu;
			this.player_num = builder.player_num;
			this.hasPlayer_num = builder.hasPlayer_num;
			this.req_player_gold = builder.req_player_gold;
			this.hasReq_player_gold = builder.hasReq_player_gold;
			this.can_enter = builder.can_enter;
			this.hasCan_enter = builder.hasCan_enter;
			this.chu_tile_time = builder.chu_tile_time;
			this.hasChu_tile_time = builder.hasChu_tile_time;
			}

	public static class Builder {
		private String id;
		private boolean hasId = false;

		private String name;
		private boolean hasName = false;

		private int base_zhu;
		private boolean hasBase_zhu = false;

		private int player_num;
		private boolean hasPlayer_num = false;

		private int req_player_gold;
		private boolean hasReq_player_gold = false;

		private boolean can_enter;
		private boolean hasCan_enter = false;

		private int chu_tile_time;
		private boolean hasChu_tile_time = false;


		private Builder() {
		}

		public Builder setId(final String id) {
			this.id = id;
			this.hasId = true;
			return this;
		}

		public Builder setName(final String name) {
			this.name = name;
			this.hasName = true;
			return this;
		}

		public Builder setBase_zhu(final int base_zhu) {
			this.base_zhu = base_zhu;
			this.hasBase_zhu = true;
			return this;
		}

		public Builder setPlayer_num(final int player_num) {
			this.player_num = player_num;
			this.hasPlayer_num = true;
			return this;
		}

		public Builder setReq_player_gold(final int req_player_gold) {
			this.req_player_gold = req_player_gold;
			this.hasReq_player_gold = true;
			return this;
		}

		public Builder setCan_enter(final boolean can_enter) {
			this.can_enter = can_enter;
			this.hasCan_enter = true;
			return this;
		}

		public Builder setChu_tile_time(final int chu_tile_time) {
			this.chu_tile_time = chu_tile_time;
			this.hasChu_tile_time = true;
			return this;
		}

		public place_info build() {
			return new place_info(this);
		}
	}

	public String getId() {
		return id;
	}

	public boolean hasId() {
		return hasId;
	}

	public String getName() {
		return name;
	}

	public boolean hasName() {
		return hasName;
	}

	public int getBase_zhu() {
		return base_zhu;
	}

	public boolean hasBase_zhu() {
		return hasBase_zhu;
	}

	public int getPlayer_num() {
		return player_num;
	}

	public boolean hasPlayer_num() {
		return hasPlayer_num;
	}

	public int getReq_player_gold() {
		return req_player_gold;
	}

	public boolean hasReq_player_gold() {
		return hasReq_player_gold;
	}

	public boolean getCan_enter() {
		return can_enter;
	}

	public boolean hasCan_enter() {
		return hasCan_enter;
	}

	public int getChu_tile_time() {
		return chu_tile_time;
	}

	public boolean hasChu_tile_time() {
		return hasChu_tile_time;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasId) retValue += "id = " + this.id + TAB;
		if(hasName) retValue += "name = " + this.name + TAB;
		if(hasBase_zhu) retValue += "base_zhu = " + this.base_zhu + TAB;
		if(hasPlayer_num) retValue += "player_num = " + this.player_num + TAB;
		if(hasReq_player_gold) retValue += "req_player_gold = " + this.req_player_gold + TAB;
		if(hasCan_enter) retValue += "can_enter = " + this.can_enter + TAB;
		if(hasChu_tile_time) retValue += "chu_tile_time = " + this.chu_tile_time + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasId) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberId, id);
		if(hasName) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberName, name);
		if(hasBase_zhu) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberBase_zhu, base_zhu);
		if(hasPlayer_num) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberPlayer_num, player_num);
		if(hasReq_player_gold) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberReq_player_gold, req_player_gold);
		if(hasCan_enter) totalSize += ComputeSizeUtil.computeBooleanSize(fieldNumberCan_enter, can_enter);
		if(hasChu_tile_time) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberChu_tile_time, chu_tile_time);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasId) writer.writeString(fieldNumberId, id);
		if(hasName) writer.writeString(fieldNumberName, name);
		if(hasBase_zhu) writer.writeInt(fieldNumberBase_zhu, base_zhu);
		if(hasPlayer_num) writer.writeInt(fieldNumberPlayer_num, player_num);
		if(hasReq_player_gold) writer.writeInt(fieldNumberReq_player_gold, req_player_gold);
		if(hasCan_enter) writer.writeBoolean(fieldNumberCan_enter, can_enter);
		if(hasChu_tile_time) writer.writeInt(fieldNumberChu_tile_time, chu_tile_time);
	}

	static place_info parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final place_info.Builder builder = place_info.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberId:
				builder.setId(reader.readString(fieldNumber));
				break;
			case fieldNumberName:
				builder.setName(reader.readString(fieldNumber));
				break;
			case fieldNumberBase_zhu:
				builder.setBase_zhu(reader.readInt(fieldNumber));
				break;
			case fieldNumberPlayer_num:
				builder.setPlayer_num(reader.readInt(fieldNumber));
				break;
			case fieldNumberReq_player_gold:
				builder.setReq_player_gold(reader.readInt(fieldNumber));
				break;
			case fieldNumberCan_enter:
				builder.setCan_enter(reader.readBoolean(fieldNumber));
				break;
			case fieldNumberChu_tile_time:
				builder.setChu_tile_time(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		place_info.unknownTagHandler = unknownTagHandler;
	}

	public static place_info parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static place_info parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static place_info parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}