package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:46 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_be_invited_company extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final String from_name;
	private static final int fieldNumberFrom_name = 1;
	private final boolean hasFrom_name;

	private final String from_host;
	private static final int fieldNumberFrom_host = 2;
	private final boolean hasFrom_host;

	private final int from_port;
	private static final int fieldNumberFrom_port = 3;
	private final boolean hasFrom_port;

	private final int from_table;
	private static final int fieldNumberFrom_table = 4;
	private final boolean hasFrom_table;

	private final int from_seat;
	private static final int fieldNumberFrom_seat = 5;
	private final boolean hasFrom_seat;

	private final String from_id;
	private static final int fieldNumberFrom_id = 6;
	private final boolean hasFrom_id;

	private final String from_idtype;
	private static final int fieldNumberFrom_idtype = 7;
	private final boolean hasFrom_idtype;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_be_invited_company(final Builder builder) {
			this.from_name = builder.from_name;
			this.hasFrom_name = builder.hasFrom_name;
			this.from_host = builder.from_host;
			this.hasFrom_host = builder.hasFrom_host;
			this.from_port = builder.from_port;
			this.hasFrom_port = builder.hasFrom_port;
			this.from_table = builder.from_table;
			this.hasFrom_table = builder.hasFrom_table;
			this.from_seat = builder.from_seat;
			this.hasFrom_seat = builder.hasFrom_seat;
			this.from_id = builder.from_id;
			this.hasFrom_id = builder.hasFrom_id;
			this.from_idtype = builder.from_idtype;
			this.hasFrom_idtype = builder.hasFrom_idtype;
			}

	public static class Builder {
		private String from_name;
		private boolean hasFrom_name = false;

		private String from_host;
		private boolean hasFrom_host = false;

		private int from_port;
		private boolean hasFrom_port = false;

		private int from_table;
		private boolean hasFrom_table = false;

		private int from_seat;
		private boolean hasFrom_seat = false;

		private String from_id;
		private boolean hasFrom_id = false;

		private String from_idtype;
		private boolean hasFrom_idtype = false;


		private Builder() {
		}

		public Builder setFrom_name(final String from_name) {
			this.from_name = from_name;
			this.hasFrom_name = true;
			return this;
		}

		public Builder setFrom_host(final String from_host) {
			this.from_host = from_host;
			this.hasFrom_host = true;
			return this;
		}

		public Builder setFrom_port(final int from_port) {
			this.from_port = from_port;
			this.hasFrom_port = true;
			return this;
		}

		public Builder setFrom_table(final int from_table) {
			this.from_table = from_table;
			this.hasFrom_table = true;
			return this;
		}

		public Builder setFrom_seat(final int from_seat) {
			this.from_seat = from_seat;
			this.hasFrom_seat = true;
			return this;
		}

		public Builder setFrom_id(final String from_id) {
			this.from_id = from_id;
			this.hasFrom_id = true;
			return this;
		}

		public Builder setFrom_idtype(final String from_idtype) {
			this.from_idtype = from_idtype;
			this.hasFrom_idtype = true;
			return this;
		}

		public sc_be_invited_company build() {
			return new sc_be_invited_company(this);
		}
	}

	public String getFrom_name() {
		return from_name;
	}

	public boolean hasFrom_name() {
		return hasFrom_name;
	}

	public String getFrom_host() {
		return from_host;
	}

	public boolean hasFrom_host() {
		return hasFrom_host;
	}

	public int getFrom_port() {
		return from_port;
	}

	public boolean hasFrom_port() {
		return hasFrom_port;
	}

	public int getFrom_table() {
		return from_table;
	}

	public boolean hasFrom_table() {
		return hasFrom_table;
	}

	public int getFrom_seat() {
		return from_seat;
	}

	public boolean hasFrom_seat() {
		return hasFrom_seat;
	}

	public String getFrom_id() {
		return from_id;
	}

	public boolean hasFrom_id() {
		return hasFrom_id;
	}

	public String getFrom_idtype() {
		return from_idtype;
	}

	public boolean hasFrom_idtype() {
		return hasFrom_idtype;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasFrom_name) retValue += "from_name = " + this.from_name + TAB;
		if(hasFrom_host) retValue += "from_host = " + this.from_host + TAB;
		if(hasFrom_port) retValue += "from_port = " + this.from_port + TAB;
		if(hasFrom_table) retValue += "from_table = " + this.from_table + TAB;
		if(hasFrom_seat) retValue += "from_seat = " + this.from_seat + TAB;
		if(hasFrom_id) retValue += "from_id = " + this.from_id + TAB;
		if(hasFrom_idtype) retValue += "from_idtype = " + this.from_idtype + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasFrom_name) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberFrom_name, from_name);
		if(hasFrom_host) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberFrom_host, from_host);
		if(hasFrom_port) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberFrom_port, from_port);
		if(hasFrom_table) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberFrom_table, from_table);
		if(hasFrom_seat) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberFrom_seat, from_seat);
		if(hasFrom_id) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberFrom_id, from_id);
		if(hasFrom_idtype) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberFrom_idtype, from_idtype);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasFrom_name) writer.writeString(fieldNumberFrom_name, from_name);
		if(hasFrom_host) writer.writeString(fieldNumberFrom_host, from_host);
		if(hasFrom_port) writer.writeInt(fieldNumberFrom_port, from_port);
		if(hasFrom_table) writer.writeInt(fieldNumberFrom_table, from_table);
		if(hasFrom_seat) writer.writeInt(fieldNumberFrom_seat, from_seat);
		if(hasFrom_id) writer.writeString(fieldNumberFrom_id, from_id);
		if(hasFrom_idtype) writer.writeString(fieldNumberFrom_idtype, from_idtype);
	}

	static sc_be_invited_company parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_be_invited_company.Builder builder = sc_be_invited_company.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberFrom_name:
				builder.setFrom_name(reader.readString(fieldNumber));
				break;
			case fieldNumberFrom_host:
				builder.setFrom_host(reader.readString(fieldNumber));
				break;
			case fieldNumberFrom_port:
				builder.setFrom_port(reader.readInt(fieldNumber));
				break;
			case fieldNumberFrom_table:
				builder.setFrom_table(reader.readInt(fieldNumber));
				break;
			case fieldNumberFrom_seat:
				builder.setFrom_seat(reader.readInt(fieldNumber));
				break;
			case fieldNumberFrom_id:
				builder.setFrom_id(reader.readString(fieldNumber));
				break;
			case fieldNumberFrom_idtype:
				builder.setFrom_idtype(reader.readString(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_be_invited_company.unknownTagHandler = unknownTagHandler;
	}

	public static sc_be_invited_company parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_be_invited_company parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_be_invited_company parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}