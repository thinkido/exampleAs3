package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:46 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class t_iteminfo extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int id;
	private static final int fieldNumberId = 1;
	private final boolean hasId;

	private final int type;
	private static final int fieldNumberType = 2;
	private final boolean hasType;

	private final String name;
	private static final int fieldNumberName = 3;
	private final boolean hasName;

	private final String desc;
	private static final int fieldNumberDesc = 4;
	private final boolean hasDesc;

	private final String image;
	private static final int fieldNumberImage = 5;
	private final boolean hasImage;

	private final String use_type;
	private static final int fieldNumberUse_type = 6;
	private final boolean hasUse_type;


	public static Builder newBuilder() {
		return new Builder();
	}

	private t_iteminfo(final Builder builder) {
			this.id = builder.id;
			this.hasId = builder.hasId;
			this.type = builder.type;
			this.hasType = builder.hasType;
			this.name = builder.name;
			this.hasName = builder.hasName;
			this.desc = builder.desc;
			this.hasDesc = builder.hasDesc;
			this.image = builder.image;
			this.hasImage = builder.hasImage;
			this.use_type = builder.use_type;
			this.hasUse_type = builder.hasUse_type;
			}

	public static class Builder {
		private int id;
		private boolean hasId = false;

		private int type;
		private boolean hasType = false;

		private String name;
		private boolean hasName = false;

		private String desc;
		private boolean hasDesc = false;

		private String image;
		private boolean hasImage = false;

		private String use_type;
		private boolean hasUse_type = false;


		private Builder() {
		}

		public Builder setId(final int id) {
			this.id = id;
			this.hasId = true;
			return this;
		}

		public Builder setType(final int type) {
			this.type = type;
			this.hasType = true;
			return this;
		}

		public Builder setName(final String name) {
			this.name = name;
			this.hasName = true;
			return this;
		}

		public Builder setDesc(final String desc) {
			this.desc = desc;
			this.hasDesc = true;
			return this;
		}

		public Builder setImage(final String image) {
			this.image = image;
			this.hasImage = true;
			return this;
		}

		public Builder setUse_type(final String use_type) {
			this.use_type = use_type;
			this.hasUse_type = true;
			return this;
		}

		public t_iteminfo build() {
			return new t_iteminfo(this);
		}
	}

	public int getId() {
		return id;
	}

	public boolean hasId() {
		return hasId;
	}

	public int getType() {
		return type;
	}

	public boolean hasType() {
		return hasType;
	}

	public String getName() {
		return name;
	}

	public boolean hasName() {
		return hasName;
	}

	public String getDesc() {
		return desc;
	}

	public boolean hasDesc() {
		return hasDesc;
	}

	public String getImage() {
		return image;
	}

	public boolean hasImage() {
		return hasImage;
	}

	public String getUse_type() {
		return use_type;
	}

	public boolean hasUse_type() {
		return hasUse_type;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasId) retValue += "id = " + this.id + TAB;
		if(hasType) retValue += "type = " + this.type + TAB;
		if(hasName) retValue += "name = " + this.name + TAB;
		if(hasDesc) retValue += "desc = " + this.desc + TAB;
		if(hasImage) retValue += "image = " + this.image + TAB;
		if(hasUse_type) retValue += "use_type = " + this.use_type + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasId) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberId, id);
		if(hasType) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberType, type);
		if(hasName) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberName, name);
		if(hasDesc) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberDesc, desc);
		if(hasImage) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberImage, image);
		if(hasUse_type) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberUse_type, use_type);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasId) writer.writeInt(fieldNumberId, id);
		if(hasType) writer.writeInt(fieldNumberType, type);
		if(hasName) writer.writeString(fieldNumberName, name);
		if(hasDesc) writer.writeString(fieldNumberDesc, desc);
		if(hasImage) writer.writeString(fieldNumberImage, image);
		if(hasUse_type) writer.writeString(fieldNumberUse_type, use_type);
	}

	static t_iteminfo parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final t_iteminfo.Builder builder = t_iteminfo.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberId:
				builder.setId(reader.readInt(fieldNumber));
				break;
			case fieldNumberType:
				builder.setType(reader.readInt(fieldNumber));
				break;
			case fieldNumberName:
				builder.setName(reader.readString(fieldNumber));
				break;
			case fieldNumberDesc:
				builder.setDesc(reader.readString(fieldNumber));
				break;
			case fieldNumberImage:
				builder.setImage(reader.readString(fieldNumber));
				break;
			case fieldNumberUse_type:
				builder.setUse_type(reader.readString(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		t_iteminfo.unknownTagHandler = unknownTagHandler;
	}

	public static t_iteminfo parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static t_iteminfo parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static t_iteminfo parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}