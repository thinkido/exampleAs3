package protocol;
// Generated by proto2javame, Sat Jan 09 02:23:17 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_invite_jump extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final int result;
	private static final int fieldNumberResult = 1;
	private final boolean hasResult;

	private final String to_host;
	private static final int fieldNumberTo_host = 2;
	private final boolean hasTo_host;

	private final int to_port;
	private static final int fieldNumberTo_port = 3;
	private final boolean hasTo_port;

	private final int to_table;
	private static final int fieldNumberTo_table = 4;
	private final boolean hasTo_table;

	private final int to_seat;
	private static final int fieldNumberTo_seat = 5;
	private final boolean hasTo_seat;

	private final String inviter_id;
	private static final int fieldNumberInviter_id = 6;
	private final boolean hasInviter_id;

	private final String inviter_idtype;
	private static final int fieldNumberInviter_idtype = 7;
	private final boolean hasInviter_idtype;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_invite_jump(final Builder builder) {
			this.result = builder.result;
			this.hasResult = builder.hasResult;
			this.to_host = builder.to_host;
			this.hasTo_host = builder.hasTo_host;
			this.to_port = builder.to_port;
			this.hasTo_port = builder.hasTo_port;
			this.to_table = builder.to_table;
			this.hasTo_table = builder.hasTo_table;
			this.to_seat = builder.to_seat;
			this.hasTo_seat = builder.hasTo_seat;
			this.inviter_id = builder.inviter_id;
			this.hasInviter_id = builder.hasInviter_id;
			this.inviter_idtype = builder.inviter_idtype;
			this.hasInviter_idtype = builder.hasInviter_idtype;
			}

	public static class Builder {
		private int result;
		private boolean hasResult = false;

		private String to_host;
		private boolean hasTo_host = false;

		private int to_port;
		private boolean hasTo_port = false;

		private int to_table;
		private boolean hasTo_table = false;

		private int to_seat;
		private boolean hasTo_seat = false;

		private String inviter_id;
		private boolean hasInviter_id = false;

		private String inviter_idtype;
		private boolean hasInviter_idtype = false;


		private Builder() {
		}

		public Builder setResult(final int result) {
			this.result = result;
			this.hasResult = true;
			return this;
		}

		public Builder setTo_host(final String to_host) {
			this.to_host = to_host;
			this.hasTo_host = true;
			return this;
		}

		public Builder setTo_port(final int to_port) {
			this.to_port = to_port;
			this.hasTo_port = true;
			return this;
		}

		public Builder setTo_table(final int to_table) {
			this.to_table = to_table;
			this.hasTo_table = true;
			return this;
		}

		public Builder setTo_seat(final int to_seat) {
			this.to_seat = to_seat;
			this.hasTo_seat = true;
			return this;
		}

		public Builder setInviter_id(final String inviter_id) {
			this.inviter_id = inviter_id;
			this.hasInviter_id = true;
			return this;
		}

		public Builder setInviter_idtype(final String inviter_idtype) {
			this.inviter_idtype = inviter_idtype;
			this.hasInviter_idtype = true;
			return this;
		}

		public sc_invite_jump build() {
			return new sc_invite_jump(this);
		}
	}

	public int getResult() {
		return result;
	}

	public boolean hasResult() {
		return hasResult;
	}

	public String getTo_host() {
		return to_host;
	}

	public boolean hasTo_host() {
		return hasTo_host;
	}

	public int getTo_port() {
		return to_port;
	}

	public boolean hasTo_port() {
		return hasTo_port;
	}

	public int getTo_table() {
		return to_table;
	}

	public boolean hasTo_table() {
		return hasTo_table;
	}

	public int getTo_seat() {
		return to_seat;
	}

	public boolean hasTo_seat() {
		return hasTo_seat;
	}

	public String getInviter_id() {
		return inviter_id;
	}

	public boolean hasInviter_id() {
		return hasInviter_id;
	}

	public String getInviter_idtype() {
		return inviter_idtype;
	}

	public boolean hasInviter_idtype() {
		return hasInviter_idtype;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasResult) retValue += "result = " + this.result + TAB;
		if(hasTo_host) retValue += "to_host = " + this.to_host + TAB;
		if(hasTo_port) retValue += "to_port = " + this.to_port + TAB;
		if(hasTo_table) retValue += "to_table = " + this.to_table + TAB;
		if(hasTo_seat) retValue += "to_seat = " + this.to_seat + TAB;
		if(hasInviter_id) retValue += "inviter_id = " + this.inviter_id + TAB;
		if(hasInviter_idtype) retValue += "inviter_idtype = " + this.inviter_idtype + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasResult) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberResult, result);
		if(hasTo_host) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberTo_host, to_host);
		if(hasTo_port) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTo_port, to_port);
		if(hasTo_table) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTo_table, to_table);
		if(hasTo_seat) totalSize += ComputeSizeUtil.computeIntSize(fieldNumberTo_seat, to_seat);
		if(hasInviter_id) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberInviter_id, inviter_id);
		if(hasInviter_idtype) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberInviter_idtype, inviter_idtype);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasResult) writer.writeInt(fieldNumberResult, result);
		if(hasTo_host) writer.writeString(fieldNumberTo_host, to_host);
		if(hasTo_port) writer.writeInt(fieldNumberTo_port, to_port);
		if(hasTo_table) writer.writeInt(fieldNumberTo_table, to_table);
		if(hasTo_seat) writer.writeInt(fieldNumberTo_seat, to_seat);
		if(hasInviter_id) writer.writeString(fieldNumberInviter_id, inviter_id);
		if(hasInviter_idtype) writer.writeString(fieldNumberInviter_idtype, inviter_idtype);
	}

	static sc_invite_jump parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_invite_jump.Builder builder = sc_invite_jump.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberResult:
				builder.setResult(reader.readInt(fieldNumber));
				break;
			case fieldNumberTo_host:
				builder.setTo_host(reader.readString(fieldNumber));
				break;
			case fieldNumberTo_port:
				builder.setTo_port(reader.readInt(fieldNumber));
				break;
			case fieldNumberTo_table:
				builder.setTo_table(reader.readInt(fieldNumber));
				break;
			case fieldNumberTo_seat:
				builder.setTo_seat(reader.readInt(fieldNumber));
				break;
			case fieldNumberInviter_id:
				builder.setInviter_id(reader.readString(fieldNumber));
				break;
			case fieldNumberInviter_idtype:
				builder.setInviter_idtype(reader.readString(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_invite_jump.unknownTagHandler = unknownTagHandler;
	}

	public static sc_invite_jump parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_invite_jump parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_invite_jump parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}