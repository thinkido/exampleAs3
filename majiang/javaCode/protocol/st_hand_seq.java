package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:47 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class st_hand_seq extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final java.util.Vector wan;
	private static final int fieldNumberWan = 1;

	private final java.util.Vector tong;
	private static final int fieldNumberTong = 2;

	private final java.util.Vector tiao;
	private static final int fieldNumberTiao = 3;

	private final java.util.Vector zi;
	private static final int fieldNumberZi = 4;

	private final java.util.Vector hua;
	private static final int fieldNumberHua = 5;

	private final java.util.Vector lack;
	private static final int fieldNumberLack = 6;

	private final java.util.Vector mo;
	private static final int fieldNumberMo = 7;


	public static Builder newBuilder() {
		return new Builder();
	}

	private st_hand_seq(final Builder builder) {
			this.wan = builder.wan;
			this.tong = builder.tong;
			this.tiao = builder.tiao;
			this.zi = builder.zi;
			this.hua = builder.hua;
			this.lack = builder.lack;
			this.mo = builder.mo;
			}

	public static class Builder {
		private java.util.Vector wan = new java.util.Vector();
		private boolean hasWan = false;

		private java.util.Vector tong = new java.util.Vector();
		private boolean hasTong = false;

		private java.util.Vector tiao = new java.util.Vector();
		private boolean hasTiao = false;

		private java.util.Vector zi = new java.util.Vector();
		private boolean hasZi = false;

		private java.util.Vector hua = new java.util.Vector();
		private boolean hasHua = false;

		private java.util.Vector lack = new java.util.Vector();
		private boolean hasLack = false;

		private java.util.Vector mo = new java.util.Vector();
		private boolean hasMo = false;


		private Builder() {
		}

		public Builder setWan(final java.util.Vector wan) {
			if(!hasWan) {
				hasWan = true;
			}
			this.wan = wan;
			return this;
		}


		public Builder addElementWan(final int element) {
			if(!hasWan) {
				hasWan = true;
			}
			wan.addElement(new Integer(element));
			return this;
		}

		public Builder setTong(final java.util.Vector tong) {
			if(!hasTong) {
				hasTong = true;
			}
			this.tong = tong;
			return this;
		}


		public Builder addElementTong(final int element) {
			if(!hasTong) {
				hasTong = true;
			}
			tong.addElement(new Integer(element));
			return this;
		}

		public Builder setTiao(final java.util.Vector tiao) {
			if(!hasTiao) {
				hasTiao = true;
			}
			this.tiao = tiao;
			return this;
		}


		public Builder addElementTiao(final int element) {
			if(!hasTiao) {
				hasTiao = true;
			}
			tiao.addElement(new Integer(element));
			return this;
		}

		public Builder setZi(final java.util.Vector zi) {
			if(!hasZi) {
				hasZi = true;
			}
			this.zi = zi;
			return this;
		}


		public Builder addElementZi(final int element) {
			if(!hasZi) {
				hasZi = true;
			}
			zi.addElement(new Integer(element));
			return this;
		}

		public Builder setHua(final java.util.Vector hua) {
			if(!hasHua) {
				hasHua = true;
			}
			this.hua = hua;
			return this;
		}


		public Builder addElementHua(final int element) {
			if(!hasHua) {
				hasHua = true;
			}
			hua.addElement(new Integer(element));
			return this;
		}

		public Builder setLack(final java.util.Vector lack) {
			if(!hasLack) {
				hasLack = true;
			}
			this.lack = lack;
			return this;
		}


		public Builder addElementLack(final int element) {
			if(!hasLack) {
				hasLack = true;
			}
			lack.addElement(new Integer(element));
			return this;
		}

		public Builder setMo(final java.util.Vector mo) {
			if(!hasMo) {
				hasMo = true;
			}
			this.mo = mo;
			return this;
		}


		public Builder addElementMo(final int element) {
			if(!hasMo) {
				hasMo = true;
			}
			mo.addElement(new Integer(element));
			return this;
		}

		public st_hand_seq build() {
			return new st_hand_seq(this);
		}
	}

	public java.util.Vector getWan() {
		return wan;
	}

	public java.util.Vector getTong() {
		return tong;
	}

	public java.util.Vector getTiao() {
		return tiao;
	}

	public java.util.Vector getZi() {
		return zi;
	}

	public java.util.Vector getHua() {
		return hua;
	}

	public java.util.Vector getLack() {
		return lack;
	}

	public java.util.Vector getMo() {
		return mo;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		retValue += "wan = " + this.wan + TAB;
		retValue += "tong = " + this.tong + TAB;
		retValue += "tiao = " + this.tiao + TAB;
		retValue += "zi = " + this.zi + TAB;
		retValue += "hua = " + this.hua + TAB;
		retValue += "lack = " + this.lack + TAB;
		retValue += "mo = " + this.mo + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberWan, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, wan);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberTong, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, tong);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberTiao, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, tiao);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberZi, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, zi);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberHua, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, hua);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberLack, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, lack);
		totalSize += ComputeSizeUtil.computeListSize(fieldNumberMo, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, mo);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		writer.writeList(fieldNumberWan, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, wan);
		writer.writeList(fieldNumberTong, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, tong);
		writer.writeList(fieldNumberTiao, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, tiao);
		writer.writeList(fieldNumberZi, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, zi);
		writer.writeList(fieldNumberHua, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, hua);
		writer.writeList(fieldNumberLack, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, lack);
		writer.writeList(fieldNumberMo, net.jarlehansen.protobuf.javame.SupportedDataTypes.DATA_TYPE_INT, mo);
	}

	static st_hand_seq parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final st_hand_seq.Builder builder = st_hand_seq.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberWan:
				builder.addElementWan(reader.readInt(fieldNumber));
				break;
			case fieldNumberTong:
				builder.addElementTong(reader.readInt(fieldNumber));
				break;
			case fieldNumberTiao:
				builder.addElementTiao(reader.readInt(fieldNumber));
				break;
			case fieldNumberZi:
				builder.addElementZi(reader.readInt(fieldNumber));
				break;
			case fieldNumberHua:
				builder.addElementHua(reader.readInt(fieldNumber));
				break;
			case fieldNumberLack:
				builder.addElementLack(reader.readInt(fieldNumber));
				break;
			case fieldNumberMo:
				builder.addElementMo(reader.readInt(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		st_hand_seq.unknownTagHandler = unknownTagHandler;
	}

	public static st_hand_seq parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static st_hand_seq parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static st_hand_seq parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}