package protocol;
// Generated by proto2javame, Wed Jan 13 00:12:47 CST 2016.

import java.io.IOException;
import java.io.InputStream;


import net.jarlehansen.protobuf.javame.input.InputReader;
import net.jarlehansen.protobuf.javame.input.DelimitedInputStream;
import net.jarlehansen.protobuf.javame.input.DelimitedSizeUtil;
import net.jarlehansen.protobuf.javame.ComputeSizeUtil;
import net.jarlehansen.protobuf.javame.output.OutputWriter;
import net.jarlehansen.protobuf.javame.AbstractOutputWriter;
import net.jarlehansen.protobuf.javame.input.taghandler.UnknownTagHandler;
import net.jarlehansen.protobuf.javame.input.taghandler.DefaultUnknownTagHandlerImpl;

public final class sc_enter_game_notify extends AbstractOutputWriter {
	private static UnknownTagHandler unknownTagHandler = DefaultUnknownTagHandlerImpl.newInstance();

	private final scenter_seat_info seat_info;
	private static final int fieldNumberSeat_info = 2;
	private final boolean hasSeat_info;

	private final String rev_name;
	private static final int fieldNumberRev_name = 3;
	private final boolean hasRev_name;


	public static Builder newBuilder() {
		return new Builder();
	}

	private sc_enter_game_notify(final Builder builder) {
			this.seat_info = builder.seat_info;
			this.hasSeat_info = builder.hasSeat_info;
			this.rev_name = builder.rev_name;
			this.hasRev_name = builder.hasRev_name;
			}

	public static class Builder {
		private scenter_seat_info seat_info;
		private boolean hasSeat_info = false;

		private String rev_name;
		private boolean hasRev_name = false;


		private Builder() {
		}

		public Builder setSeat_info(final scenter_seat_info seat_info) {
			this.seat_info = seat_info;
			this.hasSeat_info = true;
			return this;
		}

		public Builder setRev_name(final String rev_name) {
			this.rev_name = rev_name;
			this.hasRev_name = true;
			return this;
		}

		public sc_enter_game_notify build() {
			return new sc_enter_game_notify(this);
		}
	}

	public scenter_seat_info getSeat_info() {
		return seat_info;
	}

	public boolean hasSeat_info() {
		return hasSeat_info;
	}

	public String getRev_name() {
		return rev_name;
	}

	public boolean hasRev_name() {
		return hasRev_name;
	}

	public String toString() {
		final String TAB = "   ";
		String retValue = "";
		retValue += this.getClass().getName() + "(";
		if(hasSeat_info) retValue += "seat_info = " + this.seat_info + TAB;
		if(hasRev_name) retValue += "rev_name = " + this.rev_name + TAB;
		retValue += ")";

		return retValue;
	}

	// Override
	public int computeSize() {
		int totalSize = 0;
		if(hasRev_name) totalSize += ComputeSizeUtil.computeStringSize(fieldNumberRev_name, rev_name);
		totalSize += computeNestedMessageSize();

		return totalSize;
	}

	private int computeNestedMessageSize() {
		int messageSize = 0;
		if(hasSeat_info) messageSize += ComputeSizeUtil.computeMessageSize(fieldNumberSeat_info, seat_info.computeSize());

		return messageSize;
	}

	// Override
	public void writeFields(final OutputWriter writer) throws IOException {
		if(hasSeat_info) { writer.writeMessage(fieldNumberSeat_info, seat_info.computeSize()); seat_info.writeFields(writer); }
		if(hasRev_name) writer.writeString(fieldNumberRev_name, rev_name);
	}

	static sc_enter_game_notify parseFields(final InputReader reader) throws IOException {
		int nextFieldNumber = getNextFieldNumber(reader);
		final sc_enter_game_notify.Builder builder = sc_enter_game_notify.newBuilder();

		while (nextFieldNumber > 0) {
			if(!populateBuilderWithField(reader, builder, nextFieldNumber)) {
				reader.getPreviousTagDataTypeAndReadContent();
			}
			nextFieldNumber = getNextFieldNumber(reader);
		}

		return builder.build();
	}

	static int getNextFieldNumber(final InputReader reader) throws IOException {
		return reader.getNextFieldNumber();
	}

	static boolean populateBuilderWithField(final InputReader reader, final Builder builder, final int fieldNumber) throws IOException {
		boolean fieldFound = true;
		switch (fieldNumber) {
			case fieldNumberSeat_info:
			 java.util.Vector vcSeat_info = reader.readMessages(fieldNumberSeat_info);
				for(int i = 0 ; i < vcSeat_info.size(); i++) {
					byte[] eachBinData = (byte[]) vcSeat_info.elementAt(i);
					scenter_seat_info.Builder builderSeat_info = scenter_seat_info.newBuilder();
					InputReader innerInputReader = new InputReader(eachBinData, unknownTagHandler);
					boolean boolSeat_info = true;
					int nestedFieldSeat_info = -1;
					while(boolSeat_info) {
						nestedFieldSeat_info = getNextFieldNumber(innerInputReader);
						boolSeat_info = scenter_seat_info.populateBuilderWithField(innerInputReader, builderSeat_info, nestedFieldSeat_info);
					}
					eachBinData = null;
					innerInputReader = null;
					builder.setSeat_info(builderSeat_info.build());
				}
				break;
			case fieldNumberRev_name:
				builder.setRev_name(reader.readString(fieldNumber));
				break;
		default:
			fieldFound = false;
		}
		return fieldFound;
	}

	public static void setUnknownTagHandler(final UnknownTagHandler unknownTagHandler) {
		sc_enter_game_notify.unknownTagHandler = unknownTagHandler;
	}

	public static sc_enter_game_notify parseFrom(final byte[] data) throws IOException {
		return parseFields(new InputReader(data, unknownTagHandler));
	}

	public static sc_enter_game_notify parseFrom(final InputStream inputStream) throws IOException {
		return parseFields(new InputReader(inputStream, unknownTagHandler));
	}

	public static sc_enter_game_notify parseDelimitedFrom(final InputStream inputStream) throws IOException {
		final int limit = DelimitedSizeUtil.readDelimitedSize(inputStream);
		return parseFields(new InputReader(new DelimitedInputStream(inputStream, limit), unknownTagHandler));
	}
}